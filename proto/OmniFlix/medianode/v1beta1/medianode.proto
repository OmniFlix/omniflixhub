syntax = "proto3";
package OmniFlix.medianode.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/OmniFlix/omniflixhub/v6/x/medianode/types";

option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_getters_all) = false;

// HardwareSpecs defines the hardware specifications of a media node
message HardwareSpecs {
  int64 cpus     = 1 [(gogoproto.jsontag) = "cpus"];          // Number of CPUs
  int64 ram_in_gb     = 2 [(gogoproto.jsontag) = "ram_in_gb"];      // RAM in GB
  int64 storage_in_gb  = 3 [(gogoproto.jsontag) = "storage_in_gb"]; // Storage in GB
}

// Deposit defines the structure for a deposit made to a media node
message Deposit {
  cosmos.base.v1beta1.Coin amount        = 1 [(gogoproto.nullable) = false]; // Amount deposited
  string depositor                        = 2 [(gogoproto.moretags) = "yaml:\"depositor\""]; // Address of the depositor
  google.protobuf.Timestamp deposited_at   = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false]; // Timestamp of the deposit
}

enum Status {
  STATUS_UNSPECIFIED   = 0;
  STATUS_PENDING       = 1;
  STATUS_ACTIVE        = 2;
  STATUS_CLOSED        = 3;
}

// MediaNode defines the structure for a media node
message MediaNode {
  string id                                       = 1;
  string url                                      = 2;
  HardwareSpecs hardware_specs                    = 3 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"hardware_specs\""];
  string owner                                    = 4;
  cosmos.base.v1beta1.Coin price_per_hour          = 5 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"price_per_hour\""];
  Status status                                   = 6; 
  bool leased                                     = 7;
  google.protobuf.Timestamp registered_at         = 8 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  repeated Deposit deposits                       = 9;
  google.protobuf.Timestamp closed_at             = 10 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false]; 

}
// LeaseStatus defines the status of a lease
enum LeaseStatus {
  LEASE_STATUS_UNSPECIFIED  = 0;
  LEASE_STATUS_ACTIVE       = 1;
  LEASE_STATUS_EXPIRED      = 2;
  LEASE_STATUS_CANCELLED    = 3;
}

// Lease defines the structure for a media node lease
message Lease {
  string media_node_id                          = 1 [(gogoproto.moretags) = "yaml:\"media_node_id\""];
  string owner                                  = 2;
  string lessee                                 = 3;
  cosmos.base.v1beta1.Coin price_per_hour       = 4 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"price_per_hour\""];
  cosmos.base.v1beta1.Coin total_lease_amount   = 5 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin settled_lease_amount = 6 [(gogoproto.moretags) = "yaml:\"settled_lease_amount\"", (gogoproto.nullable) = false];
  google.protobuf.Timestamp start_time          = 7 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"start_time\""];
  uint64 leased_hours                           = 8 [(gogoproto.moretags) = "yaml:\"leased_hours\""];
  google.protobuf.Timestamp last_settled_at     = 9 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"last_settled_at\""]; 
}
