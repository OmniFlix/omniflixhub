syntax = "proto3";
package OmniFlix.medianode.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
import "OmniFlix/medianode/v1beta1/medianode.proto";
import "OmniFlix/medianode/v1beta1/params.proto";

option go_package = "github.com/OmniFlix/omniflixhub/v6/x/medianode/types";

// Msg defines the medianode Msg service.
service Msg {
  // RegisterMediaNode registers a new media node
  rpc RegisterMediaNode(MsgRegisterMediaNode) returns (MsgRegisterMediaNodeResponse);
  // UpdateMediaNode updates an existing media node
  rpc UpdateMediaNode(MsgUpdateMediaNode) returns (MsgUpdateMediaNodeResponse);
  // LeaseMediaNode creates a new lease for a media node
  rpc LeaseMediaNode(MsgLeaseMediaNode) returns (MsgLeaseMediaNodeResponse);
  // CancelLease cancels an active lease
  rpc CancelLease(MsgCancelLease) returns (MsgCancelLeaseResponse);

  // ExtendLease Extends lease with additional hours
  rpc ExtendLease(MsgExtendLease) returns (MsgExtendLeaseResponse);
  // DepositMediaNode deposits funds for a media node
  rpc DepositMediaNode(MsgDepositMediaNode) returns (MsgDepositMediaNodeResponse);
  // CloseMediaNode closes a media node
  rpc CloseMediaNode(MsgCloseMediaNode) returns (MsgCloseMediaNodeResponse);

  //UpdateParams 
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgRegisterMediaNode represents a message to register a new media node
message MsgRegisterMediaNode {
  option (amino.name) = "OmniFlix/register-medianode";
  option (cosmos.msg.v1.signer) = "sender";


  string id  = 1;
  string url = 2;
  HardwareSpecs hardware_specs = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin price_per_hour = 4 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin deposit = 5;
  string sender = 6;
}

// MsgRegisterMediaNodeResponse defines the response for registering a media node
message MsgRegisterMediaNodeResponse {
  string media_node_id = 1; // ID of the registered media node
  string status = 2;         // Status of the registration
}


// MsgUpdateMediaNode represents a message to update an existing media node only if it's not leased
message MsgUpdateMediaNode {
  option (amino.name) = "OmniFlix/update-medianode";
  option (cosmos.msg.v1.signer) = "sender";

  string id = 1;
  HardwareSpecs hardware_specs = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin price_per_day = 3 [(gogoproto.nullable) = false];
  string sender = 4;
}

// MsgUpdateMediaNodeResponse defines the response for updating a media node
message MsgUpdateMediaNodeResponse {
}

// MsgLeaseMediaNode represents a message to lease a media node
message MsgLeaseMediaNode {
  option (amino.name) = "OmniFlix/lease-medianode";
  option (cosmos.msg.v1.signer) = "sender";

  string media_node_id             = 1;
  uint64 lease_hours               = 2;
  cosmos.base.v1beta1.Coin amount  = 3 [(gogoproto.nullable) = false];
  string sender                    = 4;
}

// MsgLeaseMediaNodeResponse defines the response for leasing a media node
message MsgLeaseMediaNodeResponse {
  Lease lease = 1;
}

// MsgExtendLease represents a message to extend lease duration
message MsgExtendLease {
  option (amino.name) = "OmniFlix/extend-medianode-lease";
  option (cosmos.msg.v1.signer) = "sender";

  string media_node_id             = 1;
  uint64 lease_hours               = 2;
  cosmos.base.v1beta1.Coin amount  = 3 [(gogoproto.nullable) = false];
  string sender                    = 4;
}

message MsgExtendLeaseResponse {
  Lease lease = 1;
}

// MsgCancelLease represents a message to cancel an active lease
message MsgCancelLease {
  option (amino.name) = "OmniFlix/cancel-medianode-lease";
  option (cosmos.msg.v1.signer) = "sender";

  string media_node_id = 1;
  string sender = 2;
}

// MsgCancelLeaseResponse defines the response for canceling a lease
message MsgCancelLeaseResponse {}

// MsgDepositMediaNode represents a message to deposit funds for a media node
message MsgDepositMediaNode {
  option (amino.name) = "OmniFlix/deposit-medianode";
  option (cosmos.msg.v1.signer) = "sender";

  string media_node_id = 1;         // ID of the media node
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false]; // Amount to deposit
  string sender = 3;                // Address of the sender
}

// MsgDepositMediaNodeResponse defines the response for depositing funds for a media node
message MsgDepositMediaNodeResponse {
  string medianode_id = 1;
  cosmos.base.v1beta1.Coin total_deposit = 2;
  string medianode_status  = 3;
}

// MsgCloseMediaNode represents a message to close a media node
message MsgCloseMediaNode {
  option (amino.name) = "Omni Flix/close-medianode";
  option (cosmos.msg.v1.signer) = "sender";

  string media_node_id = 1;         // ID of the media node
  string sender = 2;                // Address of the sender
}

message MsgCloseMediaNodeResponse {}


message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/itc parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}