// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: OmniFlix/medianode/v1beta1/medianode.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_gogo_protobuf_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	STATUS_UNSPECIFIED Status = 0
	STATUS_PENDING     Status = 1
	STATUS_ACTIVE      Status = 2
	STATUS_CLOSED      Status = 3
)

var Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_PENDING",
	2: "STATUS_ACTIVE",
	3: "STATUS_CLOSED",
}

var Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_PENDING":     1,
	"STATUS_ACTIVE":      2,
	"STATUS_CLOSED":      3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_42ab915c4f0f53d0, []int{0}
}

// LeaseStatus defines the status of a lease
type LeaseStatus int32

const (
	LEASE_STATUS_UNSPECIFIED LeaseStatus = 0
	LEASE_STATUS_ACTIVE      LeaseStatus = 1
	LEASE_STATUS_EXPIRED     LeaseStatus = 2
	LEASE_STATUS_CANCELLED   LeaseStatus = 3
)

var LeaseStatus_name = map[int32]string{
	0: "LEASE_STATUS_UNSPECIFIED",
	1: "LEASE_STATUS_ACTIVE",
	2: "LEASE_STATUS_EXPIRED",
	3: "LEASE_STATUS_CANCELLED",
}

var LeaseStatus_value = map[string]int32{
	"LEASE_STATUS_UNSPECIFIED": 0,
	"LEASE_STATUS_ACTIVE":      1,
	"LEASE_STATUS_EXPIRED":     2,
	"LEASE_STATUS_CANCELLED":   3,
}

func (x LeaseStatus) String() string {
	return proto.EnumName(LeaseStatus_name, int32(x))
}

func (LeaseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_42ab915c4f0f53d0, []int{1}
}

// HardwareSpecs defines the hardware specifications of a media node
type HardwareSpecs struct {
	Cpus    int64 `protobuf:"varint,1,opt,name=cpus,proto3" json:"cpus"`
	Ram     int64 `protobuf:"varint,2,opt,name=ram,proto3" json:"ram"`
	Storage int64 `protobuf:"varint,3,opt,name=storage,proto3" json:"storage"`
}

func (m *HardwareSpecs) Reset()         { *m = HardwareSpecs{} }
func (m *HardwareSpecs) String() string { return proto.CompactTextString(m) }
func (*HardwareSpecs) ProtoMessage()    {}
func (*HardwareSpecs) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ab915c4f0f53d0, []int{0}
}
func (m *HardwareSpecs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HardwareSpecs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HardwareSpecs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HardwareSpecs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareSpecs.Merge(m, src)
}
func (m *HardwareSpecs) XXX_Size() int {
	return m.Size()
}
func (m *HardwareSpecs) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareSpecs.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareSpecs proto.InternalMessageInfo

// Deposit defines the structure for a deposit made to a media node
type Deposit struct {
	Amount      types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
	Depositor   string     `protobuf:"bytes,2,opt,name=depositor,proto3" json:"depositor,omitempty" yaml:"depositor"`
	DepositedAt time.Time  `protobuf:"bytes,3,opt,name=deposited_at,json=depositedAt,proto3,stdtime" json:"deposited_at"`
}

func (m *Deposit) Reset()         { *m = Deposit{} }
func (m *Deposit) String() string { return proto.CompactTextString(m) }
func (*Deposit) ProtoMessage()    {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ab915c4f0f53d0, []int{1}
}
func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return m.Size()
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

// MediaNode defines the structure for a media node
type MediaNode struct {
	Id            uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Url           string        `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	HardwareSpecs HardwareSpecs `protobuf:"bytes,3,opt,name=hardware_specs,json=hardwareSpecs,proto3" json:"hardware_specs" yaml:"hardware_specs"`
	Owner         string        `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	PricePerDay   types.Coin    `protobuf:"bytes,5,opt,name=price_per_day,json=pricePerDay,proto3" json:"price_per_day" yaml:"price_per_day"`
	Status        Status        `protobuf:"varint,6,opt,name=status,proto3,enum=OmniFlix.medianode.v1beta1.Status" json:"status,omitempty"`
	Leased        bool          `protobuf:"varint,7,opt,name=leased,proto3" json:"leased,omitempty"`
	RegisteredAt  time.Time     `protobuf:"bytes,8,opt,name=registered_at,json=registeredAt,proto3,stdtime" json:"registered_at"`
	Deposits      []*Deposit    `protobuf:"bytes,9,rep,name=deposits,proto3" json:"deposits,omitempty"`
	ClosedAt      time.Time     `protobuf:"bytes,10,opt,name=closed_at,json=closedAt,proto3,stdtime" json:"closed_at"`
}

func (m *MediaNode) Reset()         { *m = MediaNode{} }
func (m *MediaNode) String() string { return proto.CompactTextString(m) }
func (*MediaNode) ProtoMessage()    {}
func (*MediaNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ab915c4f0f53d0, []int{2}
}
func (m *MediaNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaNode.Merge(m, src)
}
func (m *MediaNode) XXX_Size() int {
	return m.Size()
}
func (m *MediaNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaNode.DiscardUnknown(m)
}

var xxx_messageInfo_MediaNode proto.InternalMessageInfo

// Lease defines the structure for a media node lease
type Lease struct {
	MediaNodeId      uint64      `protobuf:"varint,1,opt,name=media_node_id,json=mediaNodeId,proto3" json:"media_node_id,omitempty" yaml:"media_node_id"`
	Leasee           string      `protobuf:"bytes,2,opt,name=leasee,proto3" json:"leasee,omitempty"`
	PricePerDay      types.Coin  `protobuf:"bytes,3,opt,name=price_per_day,json=pricePerDay,proto3" json:"price_per_day" yaml:"price_per_day"`
	TotalLeaseAmount types.Coin  `protobuf:"bytes,4,opt,name=total_lease_amount,json=totalLeaseAmount,proto3" json:"total_lease_amount"`
	SettledAmount    *types.Coin `protobuf:"bytes,5,opt,name=settled_amount,json=settledAmount,proto3" json:"settled_amount,omitempty" yaml:"settled_amount"`
	StartTime        *time.Time  `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time,omitempty" yaml:"start_time"`
	LeasedDays       uint64      `protobuf:"varint,7,opt,name=leased_days,json=leasedDays,proto3" json:"leased_days,omitempty" yaml:"leased_days"`
	Expiry           time.Time   `protobuf:"bytes,8,opt,name=expiry,proto3,stdtime" json:"expiry"`
	Status           LeaseStatus `protobuf:"varint,9,opt,name=status,proto3,enum=OmniFlix.medianode.v1beta1.LeaseStatus" json:"status"`
	LastSettledAt    *time.Time  `protobuf:"bytes,10,opt,name=last_settled_at,json=lastSettledAt,proto3,stdtime" json:"last_settled_at,omitempty" yaml:"last_settled_at"`
}

func (m *Lease) Reset()         { *m = Lease{} }
func (m *Lease) String() string { return proto.CompactTextString(m) }
func (*Lease) ProtoMessage()    {}
func (*Lease) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ab915c4f0f53d0, []int{3}
}
func (m *Lease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lease.Merge(m, src)
}
func (m *Lease) XXX_Size() int {
	return m.Size()
}
func (m *Lease) XXX_DiscardUnknown() {
	xxx_messageInfo_Lease.DiscardUnknown(m)
}

var xxx_messageInfo_Lease proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("OmniFlix.medianode.v1beta1.Status", Status_name, Status_value)
	proto.RegisterEnum("OmniFlix.medianode.v1beta1.LeaseStatus", LeaseStatus_name, LeaseStatus_value)
	proto.RegisterType((*HardwareSpecs)(nil), "OmniFlix.medianode.v1beta1.HardwareSpecs")
	proto.RegisterType((*Deposit)(nil), "OmniFlix.medianode.v1beta1.Deposit")
	proto.RegisterType((*MediaNode)(nil), "OmniFlix.medianode.v1beta1.MediaNode")
	proto.RegisterType((*Lease)(nil), "OmniFlix.medianode.v1beta1.Lease")
}

func init() {
	proto.RegisterFile("OmniFlix/medianode/v1beta1/medianode.proto", fileDescriptor_42ab915c4f0f53d0)
}

var fileDescriptor_42ab915c4f0f53d0 = []byte{
	// 943 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0x1a, 0x47,
	0x14, 0x67, 0x01, 0x63, 0x78, 0x04, 0x4a, 0xa6, 0xd4, 0x5d, 0x23, 0x77, 0xd7, 0xda, 0xaa, 0xaa,
	0xeb, 0xc3, 0xa2, 0xd0, 0xaa, 0x91, 0xa2, 0x48, 0x15, 0x7f, 0x36, 0x29, 0x2a, 0x21, 0xd6, 0x42,
	0xa2, 0x2a, 0x39, 0xac, 0x16, 0x76, 0x82, 0x57, 0xda, 0x65, 0xd0, 0xce, 0x90, 0x98, 0x7e, 0x8a,
	0x7c, 0x98, 0xde, 0x7b, 0xf5, 0xd1, 0xc7, 0x9e, 0x68, 0x63, 0xf7, 0xe4, 0xa3, 0x3f, 0x41, 0xb5,
	0x33, 0x03, 0x78, 0xd5, 0xd6, 0xb1, 0xa5, 0x5e, 0x56, 0xf3, 0xfe, 0xfc, 0xde, 0x9f, 0xdf, 0x7b,
	0xcf, 0x06, 0x0e, 0x9f, 0x87, 0x53, 0xff, 0x49, 0xe0, 0x9f, 0xd4, 0x43, 0xec, 0xf9, 0xee, 0x94,
	0x78, 0xb8, 0xfe, 0xf6, 0xc1, 0x08, 0x33, 0xf7, 0xc1, 0x46, 0x63, 0xce, 0x22, 0xc2, 0x08, 0xaa,
	0xad, 0x7c, 0xcd, 0x8d, 0x45, 0xfa, 0xd6, 0xaa, 0x13, 0x32, 0x21, 0xdc, 0xad, 0x1e, 0xbf, 0x04,
	0xa2, 0xa6, 0x4f, 0x08, 0x99, 0x04, 0xb8, 0xce, 0xa5, 0xd1, 0xfc, 0x4d, 0x9d, 0xf9, 0x21, 0xa6,
	0xcc, 0x0d, 0x67, 0xd2, 0x41, 0x1b, 0x13, 0x1a, 0x12, 0x5a, 0x1f, 0xb9, 0x74, 0x93, 0x77, 0x4c,
	0xfc, 0xa9, 0xb0, 0x1b, 0x04, 0x4a, 0x3f, 0xba, 0x91, 0xf7, 0xce, 0x8d, 0xf0, 0x60, 0x86, 0xc7,
	0x14, 0xed, 0x41, 0x76, 0x3c, 0x9b, 0x53, 0x55, 0xd9, 0x57, 0x0e, 0x32, 0xad, 0xfc, 0xe5, 0x52,
	0xe7, 0xb2, 0xcd, 0xbf, 0x68, 0x17, 0x32, 0x91, 0x1b, 0xaa, 0x69, 0x6e, 0xdc, 0xbe, 0x5c, 0xea,
	0xb1, 0x68, 0xc7, 0x1f, 0xf4, 0x15, 0x6c, 0x53, 0x46, 0x22, 0x77, 0x82, 0xd5, 0x0c, 0x37, 0x17,
	0x2f, 0x97, 0xfa, 0x4a, 0x65, 0xaf, 0x1e, 0xc6, 0x6f, 0x0a, 0x6c, 0x77, 0xf0, 0x8c, 0x50, 0x9f,
	0xa1, 0x87, 0x90, 0x73, 0x43, 0x32, 0x9f, 0x32, 0x9e, 0xad, 0xd8, 0xd8, 0x35, 0x45, 0xb5, 0x66,
	0x5c, 0xed, 0xaa, 0x73, 0xb3, 0x4d, 0xfc, 0x69, 0x2b, 0x7b, 0xba, 0xd4, 0x53, 0xb6, 0x74, 0x47,
	0x0d, 0x28, 0x78, 0x22, 0x06, 0x89, 0x78, 0x31, 0x85, 0x56, 0xf5, 0x6a, 0xa9, 0x57, 0x16, 0x6e,
	0x18, 0x3c, 0x32, 0xd6, 0x26, 0xc3, 0xde, 0xb8, 0xa1, 0xa7, 0x70, 0x4f, 0x0a, 0xd8, 0x73, 0x5c,
	0xc6, 0x8b, 0x2c, 0x36, 0x6a, 0xa6, 0x60, 0xd0, 0x5c, 0x31, 0x68, 0x0e, 0x57, 0x0c, 0xb6, 0xf2,
	0x71, 0xce, 0xf7, 0x7f, 0xe8, 0x8a, 0x5d, 0x5c, 0x23, 0x9b, 0xcc, 0xf8, 0x35, 0x0b, 0x85, 0x67,
	0xf1, 0x7c, 0xfa, 0xc4, 0xc3, 0xa8, 0x0c, 0x69, 0xdf, 0xe3, 0xf5, 0x67, 0xed, 0xb4, 0xef, 0xa1,
	0x0a, 0x64, 0xe6, 0x51, 0x20, 0x8a, 0xb2, 0xe3, 0x27, 0x22, 0x50, 0x3e, 0x96, 0x14, 0x3b, 0x34,
	0xe6, 0x58, 0xa6, 0xfe, 0xc6, 0xfc, 0xef, 0x71, 0x9b, 0x89, 0xa1, 0xb4, 0xbe, 0x88, 0x2b, 0xb9,
	0x5a, 0xea, 0x9f, 0x89, 0x06, 0x93, 0xe1, 0x0c, 0xbb, 0x74, 0x9c, 0x18, 0x61, 0x15, 0xb6, 0xc8,
	0xbb, 0x29, 0x8e, 0xd4, 0x2c, 0x2f, 0x42, 0x08, 0xe8, 0x35, 0x94, 0x66, 0x91, 0x3f, 0xc6, 0xce,
	0x0c, 0x47, 0x8e, 0xe7, 0x2e, 0xd4, 0xad, 0x8f, 0x71, 0xbe, 0x27, 0xb3, 0x56, 0x45, 0xd6, 0x04,
	0xda, 0xb0, 0x8b, 0x5c, 0x3e, 0xc2, 0x51, 0xc7, 0x5d, 0xa0, 0x47, 0x90, 0xa3, 0xcc, 0x65, 0x73,
	0xaa, 0xe6, 0xf6, 0x95, 0x83, 0x72, 0xc3, 0xb8, 0xa9, 0xb7, 0x01, 0xf7, 0xb4, 0x25, 0x02, 0xed,
	0x40, 0x2e, 0xc0, 0x2e, 0xc5, 0x9e, 0xba, 0xbd, 0xaf, 0x1c, 0xe4, 0x6d, 0x29, 0xa1, 0x2e, 0x94,
	0x22, 0x3c, 0xf1, 0x29, 0xc3, 0x91, 0x98, 0x58, 0xfe, 0x0e, 0x13, 0xbb, 0xb7, 0x81, 0x36, 0x19,
	0xfa, 0x01, 0xf2, 0x72, 0x82, 0x54, 0x2d, 0xec, 0x67, 0x0e, 0x8a, 0x8d, 0x2f, 0x6f, 0x2a, 0x50,
	0xee, 0xa7, 0xbd, 0x06, 0xa1, 0x26, 0x14, 0xc6, 0x01, 0xa1, 0xa2, 0x0e, 0xb8, 0x43, 0x1d, 0x79,
	0x01, 0x6b, 0x32, 0xe3, 0xaf, 0x2d, 0xd8, 0xea, 0xc5, 0x9d, 0xa1, 0xc7, 0x50, 0xe2, 0x39, 0x9d,
	0x38, 0xa9, 0xb3, 0xda, 0x9e, 0x96, 0xba, 0xa1, 0x3a, 0x61, 0x36, 0xec, 0x62, 0xb8, 0x5a, 0xb7,
	0xae, 0xb7, 0xa6, 0x0b, 0xcb, 0x1d, 0x93, 0xd2, 0x3f, 0xe7, 0x9b, 0xf9, 0x1f, 0xe7, 0xfb, 0x0c,
	0x10, 0x23, 0xcc, 0x0d, 0x1c, 0x9e, 0xcc, 0x91, 0x57, 0x9b, 0xbd, 0xdd, 0xd5, 0x56, 0x38, 0x94,
	0xf7, 0xde, 0x14, 0xf7, 0xfb, 0x1a, 0xca, 0x14, 0x33, 0x16, 0xc4, 0x7c, 0x8a, 0x50, 0x1f, 0x5d,
	0xc6, 0xdd, 0xcd, 0xfa, 0x27, 0xa1, 0x86, 0x5d, 0x92, 0x0a, 0x19, 0x7c, 0x08, 0x40, 0x99, 0x1b,
	0x31, 0x27, 0xfe, 0x5b, 0xc8, 0xf7, 0xf1, 0xe6, 0x61, 0xc5, 0x91, 0xef, 0xcb, 0xc8, 0x6b, 0x9c,
	0xc1, 0xa7, 0x57, 0xe0, 0x8a, 0xd8, 0x15, 0x3d, 0x84, 0xa2, 0xd8, 0xcb, 0x98, 0x1d, 0xca, 0x57,
	0x35, 0xdb, 0xda, 0xb9, 0x5a, 0xea, 0x48, 0x40, 0xaf, 0x19, 0x0d, 0x1b, 0x84, 0xd4, 0x71, 0x17,
	0x14, 0x3d, 0x86, 0x1c, 0x3e, 0x99, 0xf9, 0xd1, 0xe2, 0x4e, 0xfb, 0x2b, 0x31, 0xe8, 0xa7, 0xf5,
	0x61, 0x15, 0xf8, 0x61, 0x7d, 0x7d, 0xd3, 0xde, 0x72, 0x8a, 0xc5, 0x75, 0xb5, 0xe0, 0x72, 0xa9,
	0x4b, 0xe8, 0xfa, 0xd2, 0x46, 0xf0, 0x49, 0xe0, 0x52, 0xe6, 0xac, 0x09, 0xbc, 0xcd, 0x2e, 0x6b,
	0x57, 0x4b, 0x7d, 0x47, 0xf6, 0x98, 0x04, 0x0b, 0x8e, 0x4a, 0xb1, 0x76, 0x20, 0x27, 0xc0, 0x0e,
	0x5f, 0x41, 0x6e, 0xb0, 0xba, 0x6b, 0x34, 0x18, 0x36, 0x87, 0x2f, 0x06, 0xce, 0x8b, 0xfe, 0xe0,
	0xc8, 0x6a, 0x77, 0x9f, 0x74, 0xad, 0x4e, 0x25, 0x85, 0x10, 0x94, 0xa5, 0xfe, 0xc8, 0xea, 0x77,
	0xba, 0xfd, 0xa7, 0x15, 0x05, 0xdd, 0x87, 0x92, 0xd4, 0x35, 0xdb, 0xc3, 0xee, 0x4b, 0xab, 0x92,
	0xbe, 0xa6, 0x6a, 0xf7, 0x9e, 0x0f, 0xac, 0x4e, 0x25, 0x73, 0xf8, 0x0b, 0x14, 0xaf, 0xb5, 0x88,
	0xf6, 0x40, 0xed, 0x59, 0xcd, 0x81, 0xe5, 0xfc, 0x6b, 0x9a, 0xcf, 0xe1, 0xd3, 0x84, 0x55, 0x06,
	0x56, 0x90, 0x0a, 0xd5, 0x84, 0xc1, 0xfa, 0xf9, 0xa8, 0x6b, 0x5b, 0x9d, 0x4a, 0x1a, 0xd5, 0x60,
	0x27, 0x61, 0x69, 0x37, 0xfb, 0x6d, 0xab, 0xd7, 0x8b, 0x73, 0xb7, 0x5e, 0x9e, 0x7e, 0xd0, 0x52,
	0x67, 0x1f, 0xb4, 0xd4, 0xe9, 0xb9, 0xa6, 0x9c, 0x9d, 0x6b, 0xca, 0x9f, 0xe7, 0x9a, 0xf2, 0xfe,
	0x42, 0x4b, 0x9d, 0x5d, 0x68, 0xa9, 0xdf, 0x2f, 0xb4, 0xd4, 0xab, 0xef, 0x26, 0x3e, 0x3b, 0x9e,
	0x8f, 0xcc, 0x31, 0x09, 0xeb, 0xeb, 0x7f, 0xfa, 0x24, 0x9c, 0xfa, 0x6f, 0x02, 0xff, 0xe4, 0x78,
	0x3e, 0xaa, 0xbf, 0xfd, 0xbe, 0x7e, 0xfd, 0x57, 0x00, 0x5b, 0xcc, 0x30, 0x1d, 0xe5, 0x38, 0xe5,
	0xdf, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x25, 0xab, 0xff, 0x28, 0x08, 0x00, 0x00,
}

func (m *HardwareSpecs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HardwareSpecs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HardwareSpecs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Storage != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.Storage))
		i--
		dAtA[i] = 0x18
	}
	if m.Ram != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.Ram))
		i--
		dAtA[i] = 0x10
	}
	if m.Cpus != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.Cpus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Deposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.DepositedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.DepositedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintMedianode(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintMedianode(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMedianode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MediaNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ClosedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ClosedAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintMedianode(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x52
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMedianode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.RegisteredAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.RegisteredAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintMedianode(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x42
	if m.Leased {
		i--
		if m.Leased {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.PricePerDay.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMedianode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMedianode(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.HardwareSpecs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMedianode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintMedianode(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Lease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastSettledAt != nil {
		n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastSettledAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSettledAt):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintMedianode(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x52
	}
	if m.Status != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Expiry, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiry):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintMedianode(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x42
	if m.LeasedDays != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.LeasedDays))
		i--
		dAtA[i] = 0x38
	}
	if m.StartTime != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintMedianode(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x32
	}
	if m.SettledAmount != nil {
		{
			size, err := m.SettledAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedianode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.TotalLeaseAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMedianode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.PricePerDay.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMedianode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Leasee) > 0 {
		i -= len(m.Leasee)
		copy(dAtA[i:], m.Leasee)
		i = encodeVarintMedianode(dAtA, i, uint64(len(m.Leasee)))
		i--
		dAtA[i] = 0x12
	}
	if m.MediaNodeId != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.MediaNodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMedianode(dAtA []byte, offset int, v uint64) int {
	offset -= sovMedianode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HardwareSpecs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cpus != 0 {
		n += 1 + sovMedianode(uint64(m.Cpus))
	}
	if m.Ram != 0 {
		n += 1 + sovMedianode(uint64(m.Ram))
	}
	if m.Storage != 0 {
		n += 1 + sovMedianode(uint64(m.Storage))
	}
	return n
}

func (m *Deposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovMedianode(uint64(l))
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovMedianode(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.DepositedAt)
	n += 1 + l + sovMedianode(uint64(l))
	return n
}

func (m *MediaNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMedianode(uint64(m.Id))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMedianode(uint64(l))
	}
	l = m.HardwareSpecs.Size()
	n += 1 + l + sovMedianode(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMedianode(uint64(l))
	}
	l = m.PricePerDay.Size()
	n += 1 + l + sovMedianode(uint64(l))
	if m.Status != 0 {
		n += 1 + sovMedianode(uint64(m.Status))
	}
	if m.Leased {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.RegisteredAt)
	n += 1 + l + sovMedianode(uint64(l))
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovMedianode(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ClosedAt)
	n += 1 + l + sovMedianode(uint64(l))
	return n
}

func (m *Lease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MediaNodeId != 0 {
		n += 1 + sovMedianode(uint64(m.MediaNodeId))
	}
	l = len(m.Leasee)
	if l > 0 {
		n += 1 + l + sovMedianode(uint64(l))
	}
	l = m.PricePerDay.Size()
	n += 1 + l + sovMedianode(uint64(l))
	l = m.TotalLeaseAmount.Size()
	n += 1 + l + sovMedianode(uint64(l))
	if m.SettledAmount != nil {
		l = m.SettledAmount.Size()
		n += 1 + l + sovMedianode(uint64(l))
	}
	if m.StartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime)
		n += 1 + l + sovMedianode(uint64(l))
	}
	if m.LeasedDays != 0 {
		n += 1 + sovMedianode(uint64(m.LeasedDays))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiry)
	n += 1 + l + sovMedianode(uint64(l))
	if m.Status != 0 {
		n += 1 + sovMedianode(uint64(m.Status))
	}
	if m.LastSettledAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSettledAt)
		n += 1 + l + sovMedianode(uint64(l))
	}
	return n
}

func sovMedianode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMedianode(x uint64) (n int) {
	return sovMedianode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HardwareSpecs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedianode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HardwareSpecs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HardwareSpecs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpus", wireType)
			}
			m.Cpus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cpus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ram", wireType)
			}
			m.Ram = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ram |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			m.Storage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Storage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMedianode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedianode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedianode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.DepositedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedianode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedianode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedianode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HardwareSpecs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PricePerDay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leased", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Leased = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.RegisteredAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, &Deposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ClosedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedianode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedianode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedianode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaNodeId", wireType)
			}
			m.MediaNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaNodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leasee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leasee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PricePerDay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLeaseAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLeaseAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettledAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SettledAmount == nil {
				m.SettledAmount = &types.Coin{}
			}
			if err := m.SettledAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasedDays", wireType)
			}
			m.LeasedDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeasedDays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Expiry, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LeaseStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSettledAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSettledAt == nil {
				m.LastSettledAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastSettledAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedianode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedianode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMedianode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMedianode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMedianode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMedianode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMedianode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMedianode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMedianode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMedianode = fmt.Errorf("proto: unexpected end of group")
)
