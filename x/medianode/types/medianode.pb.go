// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: OmniFlix/medianode/v1beta1/medianode.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_gogo_protobuf_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LeaseStatus defines the status of a lease
type LeaseStatus int32

const (
	LeaseStatus_LEASE_STATUS_UNSPECIFIED LeaseStatus = 0
	LeaseStatus_LEASE_STATUS_ACTIVE      LeaseStatus = 1
	LeaseStatus_LEASE_STATUS_EXPIRED     LeaseStatus = 2
	LeaseStatus_LEASE_STATUS_CANCELLED   LeaseStatus = 3
)

var LeaseStatus_name = map[int32]string{
	0: "LEASE_STATUS_UNSPECIFIED",
	1: "LEASE_STATUS_ACTIVE",
	2: "LEASE_STATUS_EXPIRED",
	3: "LEASE_STATUS_CANCELLED",
}

var LeaseStatus_value = map[string]int32{
	"LEASE_STATUS_UNSPECIFIED": 0,
	"LEASE_STATUS_ACTIVE":      1,
	"LEASE_STATUS_EXPIRED":     2,
	"LEASE_STATUS_CANCELLED":   3,
}

func (x LeaseStatus) String() string {
	return proto.EnumName(LeaseStatus_name, int32(x))
}

func (LeaseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_42ab915c4f0f53d0, []int{0}
}

// HardwareSpecs defines the hardware specifications of a media node
type HardwareSpecs struct {
	Cpus    int64 `protobuf:"varint,1,opt,name=cpus,proto3" json:"cpus"`
	Ram     int64 `protobuf:"varint,2,opt,name=ram,proto3" json:"ram"`
	Storage int64 `protobuf:"varint,3,opt,name=storage,proto3" json:"storage"`
}

func (m *HardwareSpecs) Reset()         { *m = HardwareSpecs{} }
func (m *HardwareSpecs) String() string { return proto.CompactTextString(m) }
func (*HardwareSpecs) ProtoMessage()    {}
func (*HardwareSpecs) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ab915c4f0f53d0, []int{0}
}
func (m *HardwareSpecs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HardwareSpecs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HardwareSpecs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HardwareSpecs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareSpecs.Merge(m, src)
}
func (m *HardwareSpecs) XXX_Size() int {
	return m.Size()
}
func (m *HardwareSpecs) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareSpecs.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareSpecs proto.InternalMessageInfo

func (m *HardwareSpecs) GetCpus() int64 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

func (m *HardwareSpecs) GetRam() int64 {
	if m != nil {
		return m.Ram
	}
	return 0
}

func (m *HardwareSpecs) GetStorage() int64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

// MediaNode defines the structure for a media node
type MediaNode struct {
	Id                uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Url               string        `protobuf:"bytes,2,opt,name=url,proto3" json:"url"`
	Owner             string        `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	HardwareSpecs     HardwareSpecs `protobuf:"bytes,4,opt,name=hardware_specs,json=hardwareSpecs,proto3" json:"hardware_specs"`
	LeaseAmountPerDay types.Coin    `protobuf:"bytes,5,opt,name=lease_amount_per_day,json=leaseAmountPerDay,proto3" json:"lease_amount_per_day"`
	Leased            bool          `protobuf:"varint,8,opt,name=leased,proto3" json:"leased"`
	CreatedAt         time.Time     `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt         time.Time     `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
}

func (m *MediaNode) Reset()         { *m = MediaNode{} }
func (m *MediaNode) String() string { return proto.CompactTextString(m) }
func (*MediaNode) ProtoMessage()    {}
func (*MediaNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ab915c4f0f53d0, []int{1}
}
func (m *MediaNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaNode.Merge(m, src)
}
func (m *MediaNode) XXX_Size() int {
	return m.Size()
}
func (m *MediaNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaNode.DiscardUnknown(m)
}

var xxx_messageInfo_MediaNode proto.InternalMessageInfo

func (m *MediaNode) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MediaNode) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MediaNode) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MediaNode) GetHardwareSpecs() HardwareSpecs {
	if m != nil {
		return m.HardwareSpecs
	}
	return HardwareSpecs{}
}

func (m *MediaNode) GetLeaseAmountPerDay() types.Coin {
	if m != nil {
		return m.LeaseAmountPerDay
	}
	return types.Coin{}
}

func (m *MediaNode) GetLeased() bool {
	if m != nil {
		return m.Leased
	}
	return false
}

func (m *MediaNode) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *MediaNode) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

// Lease defines the structure for a media node lease
type Lease struct {
	MediaNodeId uint64      `protobuf:"varint,1,opt,name=media_node_id,json=mediaNodeId,proto3" json:"media_node_id"`
	LeasedTo    string      `protobuf:"bytes,2,opt,name=leased_to,json=leasedTo,proto3" json:"leased_to" yaml:"leased_to"`
	LeaseAmount types.Coin  `protobuf:"bytes,3,opt,name=lease_amount,json=leaseAmount,proto3" json:"lease_amount"`
	LeasedAt    time.Time   `protobuf:"bytes,4,opt,name=leased_at,json=leasedAt,proto3,stdtime" json:"leased_at"`
	LeasedDays  uint64      `protobuf:"varint,5,opt,name=leased_days,json=leasedDays,proto3" json:"leased_days"`
	LeaseExpiry time.Time   `protobuf:"bytes,6,opt,name=lease_expiry,json=leaseExpiry,proto3,stdtime" json:"lease_expiry"`
	LeaseStatus LeaseStatus `protobuf:"varint,7,opt,name=lease_status,json=leaseStatus,proto3,enum=OmniFlix.medianode.v1beta1.LeaseStatus" json:"lease_status"`
}

func (m *Lease) Reset()         { *m = Lease{} }
func (m *Lease) String() string { return proto.CompactTextString(m) }
func (*Lease) ProtoMessage()    {}
func (*Lease) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ab915c4f0f53d0, []int{2}
}
func (m *Lease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lease.Merge(m, src)
}
func (m *Lease) XXX_Size() int {
	return m.Size()
}
func (m *Lease) XXX_DiscardUnknown() {
	xxx_messageInfo_Lease.DiscardUnknown(m)
}

var xxx_messageInfo_Lease proto.InternalMessageInfo

func (m *Lease) GetMediaNodeId() uint64 {
	if m != nil {
		return m.MediaNodeId
	}
	return 0
}

func (m *Lease) GetLeasedTo() string {
	if m != nil {
		return m.LeasedTo
	}
	return ""
}

func (m *Lease) GetLeaseAmount() types.Coin {
	if m != nil {
		return m.LeaseAmount
	}
	return types.Coin{}
}

func (m *Lease) GetLeasedAt() time.Time {
	if m != nil {
		return m.LeasedAt
	}
	return time.Time{}
}

func (m *Lease) GetLeasedDays() uint64 {
	if m != nil {
		return m.LeasedDays
	}
	return 0
}

func (m *Lease) GetLeaseExpiry() time.Time {
	if m != nil {
		return m.LeaseExpiry
	}
	return time.Time{}
}

func (m *Lease) GetLeaseStatus() LeaseStatus {
	if m != nil {
		return m.LeaseStatus
	}
	return LeaseStatus_LEASE_STATUS_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("OmniFlix.medianode.v1beta1.LeaseStatus", LeaseStatus_name, LeaseStatus_value)
	proto.RegisterType((*HardwareSpecs)(nil), "OmniFlix.medianode.v1beta1.HardwareSpecs")
	proto.RegisterType((*MediaNode)(nil), "OmniFlix.medianode.v1beta1.MediaNode")
	proto.RegisterType((*Lease)(nil), "OmniFlix.medianode.v1beta1.Lease")
}

func init() {
	proto.RegisterFile("OmniFlix/medianode/v1beta1/medianode.proto", fileDescriptor_42ab915c4f0f53d0)
}

var fileDescriptor_42ab915c4f0f53d0 = []byte{
	// 746 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x4f, 0xdb, 0x48,
	0x14, 0x8e, 0x93, 0x10, 0x92, 0x09, 0xb0, 0x61, 0x16, 0xb1, 0x26, 0x42, 0x19, 0x36, 0xd2, 0x6a,
	0x59, 0x0e, 0xf6, 0xc2, 0x6e, 0x7b, 0xe8, 0xa1, 0x92, 0x9d, 0x98, 0x36, 0x52, 0x9a, 0x46, 0x4e,
	0x40, 0x55, 0x55, 0xc9, 0x9a, 0xc4, 0x43, 0x62, 0x29, 0xce, 0x58, 0xf6, 0x18, 0x48, 0xff, 0x0a,
	0xfe, 0xab, 0x72, 0xe4, 0xd8, 0x93, 0x5b, 0xc1, 0xcd, 0x47, 0xfe, 0x82, 0xca, 0x63, 0x3b, 0x3f,
	0x0e, 0xad, 0xe0, 0x32, 0x9e, 0x79, 0xdf, 0x7b, 0xdf, 0x9b, 0xf9, 0xbe, 0x27, 0x83, 0xa3, 0xf7,
	0xf6, 0xd4, 0x3a, 0x9d, 0x58, 0xd7, 0xb2, 0x4d, 0x4c, 0x0b, 0x4f, 0xa9, 0x49, 0xe4, 0xcb, 0xe3,
	0x01, 0x61, 0xf8, 0x78, 0x11, 0x91, 0x1c, 0x97, 0x32, 0x0a, 0xab, 0x69, 0xae, 0xb4, 0x40, 0x92,
	0xdc, 0xea, 0xce, 0x88, 0x8e, 0x28, 0x4f, 0x93, 0xa3, 0x5d, 0x5c, 0x51, 0x45, 0x23, 0x4a, 0x47,
	0x13, 0x22, 0xf3, 0xd3, 0xc0, 0xbf, 0x90, 0x99, 0x65, 0x13, 0x8f, 0x61, 0xdb, 0x49, 0x12, 0x6a,
	0x43, 0xea, 0xd9, 0xd4, 0x93, 0x07, 0xd8, 0x5b, 0xf4, 0x1d, 0x52, 0x6b, 0x1a, 0xe3, 0x75, 0x0a,
	0x36, 0xdf, 0x62, 0xd7, 0xbc, 0xc2, 0x2e, 0xe9, 0x39, 0x64, 0xe8, 0xc1, 0x7d, 0x90, 0x1f, 0x3a,
	0xbe, 0x27, 0x0a, 0x07, 0xc2, 0x61, 0x4e, 0x2d, 0x86, 0x01, 0xe2, 0x67, 0x9d, 0xaf, 0x70, 0x0f,
	0xe4, 0x5c, 0x6c, 0x8b, 0x59, 0x0e, 0xae, 0x87, 0x01, 0x8a, 0x8e, 0x7a, 0xb4, 0xc0, 0xbf, 0xc0,
	0xba, 0xc7, 0xa8, 0x8b, 0x47, 0x44, 0xcc, 0x71, 0xb8, 0x1c, 0x06, 0x28, 0x0d, 0xe9, 0xe9, 0xa6,
	0xfe, 0x25, 0x07, 0x4a, 0xef, 0xa2, 0xd7, 0x75, 0xa8, 0x49, 0xe0, 0x2e, 0xc8, 0x5a, 0x26, 0xef,
	0x95, 0x57, 0x0b, 0x61, 0x80, 0xb2, 0x96, 0xa9, 0x67, 0x2d, 0x33, 0xea, 0xe3, 0xbb, 0x13, 0xde,
	0xa7, 0x14, 0xf7, 0xf1, 0xdd, 0x89, 0x1e, 0x2d, 0x50, 0x06, 0x6b, 0xf4, 0x6a, 0x4a, 0x5c, 0xde,
	0xa5, 0xa4, 0xee, 0x85, 0x01, 0x8a, 0x03, 0x8f, 0x01, 0xda, 0x98, 0x61, 0x7b, 0xf2, 0xaa, 0xce,
	0x8f, 0x75, 0x3d, 0x0e, 0xc3, 0x73, 0xb0, 0x35, 0x4e, 0x9e, 0x68, 0x78, 0xd1, 0x1b, 0xc5, 0xfc,
	0x81, 0x70, 0x58, 0x3e, 0xf9, 0x47, 0xfa, 0xb9, 0xdc, 0xd2, 0x8a, 0x28, 0x6a, 0xfe, 0x36, 0x40,
	0x19, 0x7d, 0x73, 0xbc, 0xa2, 0x54, 0x17, 0xec, 0x4c, 0x08, 0xf6, 0x88, 0x81, 0x6d, 0xea, 0x4f,
	0x99, 0xe1, 0x10, 0xd7, 0x30, 0xf1, 0x4c, 0x5c, 0xe3, 0xec, 0x7b, 0x52, 0xac, 0xbc, 0x14, 0x29,
	0x3f, 0xa7, 0x6d, 0x50, 0x6b, 0x9a, 0xb0, 0x6d, 0xf3, 0x62, 0x85, 0xd7, 0x76, 0x89, 0xdb, 0xc4,
	0x33, 0x58, 0x07, 0x05, 0x1e, 0x34, 0xc5, 0xe2, 0x81, 0x70, 0x58, 0x54, 0x41, 0x18, 0xa0, 0x24,
	0xa2, 0x27, 0x5f, 0xd8, 0x00, 0x60, 0xe8, 0x12, 0xcc, 0x88, 0x69, 0x60, 0x26, 0x16, 0x78, 0xaf,
	0xaa, 0x14, 0x8f, 0x81, 0x94, 0x8e, 0x81, 0xd4, 0x4f, 0xc7, 0x40, 0x2d, 0x46, 0xcd, 0x6e, 0xbe,
	0x21, 0x41, 0x2f, 0x25, 0x75, 0x0a, 0x8b, 0x48, 0x7c, 0xc7, 0x4c, 0x49, 0xd6, 0x9f, 0x43, 0x92,
	0xd4, 0x29, 0xac, 0x1e, 0xe4, 0xc0, 0x5a, 0x3b, 0xba, 0x14, 0x7c, 0x01, 0x36, 0xb9, 0x82, 0x46,
	0x24, 0xa1, 0x31, 0x37, 0x74, 0x3b, 0x0c, 0xd0, 0x2a, 0xa0, 0x97, 0xed, 0xd4, 0xfa, 0x96, 0x09,
	0x5f, 0x83, 0x52, 0xfc, 0x28, 0x83, 0xd1, 0xc4, 0xea, 0x3f, 0xc3, 0x00, 0x2d, 0x82, 0x8f, 0x01,
	0xaa, 0xc4, 0x8e, 0xce, 0x43, 0x75, 0xbd, 0x18, 0xef, 0xfb, 0x14, 0xaa, 0x60, 0x63, 0xd9, 0x00,
	0x3e, 0x10, 0x4f, 0x10, 0xbe, 0xbc, 0x24, 0x3c, 0x54, 0xe6, 0x77, 0xc0, 0x2c, 0x99, 0x8b, 0xa7,
	0x09, 0x91, 0x5c, 0x43, 0x61, 0xf0, 0x5f, 0x50, 0x4e, 0x28, 0x4c, 0x3c, 0xf3, 0xb8, 0xfd, 0x79,
	0xf5, 0xb7, 0x30, 0x40, 0xcb, 0x61, 0x1d, 0xc4, 0x87, 0x26, 0x9e, 0x79, 0xf0, 0x4d, 0x7a, 0x71,
	0x72, 0xed, 0x58, 0xee, 0xec, 0x59, 0x2e, 0xc6, 0xa4, 0x1a, 0x2f, 0x84, 0x9f, 0x52, 0x22, 0x8f,
	0x61, 0xe6, 0x7b, 0xdc, 0xc9, 0xad, 0x93, 0xbf, 0x7f, 0x35, 0xd8, 0xdc, 0xb1, 0x1e, 0x4f, 0x57,
	0x2b, 0x61, 0x80, 0x56, 0x08, 0x12, 0xf6, 0x18, 0x3e, 0xfa, 0x0c, 0xca, 0x4b, 0xd9, 0x70, 0x1f,
	0x88, 0x6d, 0x4d, 0xe9, 0x69, 0x46, 0xaf, 0xaf, 0xf4, 0xcf, 0x7a, 0xc6, 0x59, 0xa7, 0xd7, 0xd5,
	0x1a, 0xad, 0xd3, 0x96, 0xd6, 0xac, 0x64, 0xe0, 0x1f, 0xe0, 0xf7, 0x15, 0x54, 0x69, 0xf4, 0x5b,
	0xe7, 0x5a, 0x45, 0x80, 0x22, 0xd8, 0x59, 0x01, 0xb4, 0x0f, 0xdd, 0x96, 0xae, 0x35, 0x2b, 0x59,
	0x58, 0x05, 0xbb, 0x2b, 0x48, 0x43, 0xe9, 0x34, 0xb4, 0x76, 0x5b, 0x6b, 0x56, 0x72, 0x6a, 0xe7,
	0xf6, 0xbe, 0x26, 0xdc, 0xdd, 0xd7, 0x84, 0xef, 0xf7, 0x35, 0xe1, 0xe6, 0xa1, 0x96, 0xb9, 0x7b,
	0xa8, 0x65, 0xbe, 0x3e, 0xd4, 0x32, 0x1f, 0xff, 0x1f, 0x59, 0x6c, 0xec, 0x0f, 0xa4, 0x21, 0xb5,
	0xe5, 0xf9, 0xbf, 0x95, 0xda, 0x53, 0xeb, 0x62, 0x62, 0x5d, 0x8f, 0xfd, 0x81, 0x7c, 0xf9, 0x52,
	0x5e, 0xfe, 0xd9, 0xb2, 0x99, 0x43, 0xbc, 0x41, 0x81, 0x8b, 0xfa, 0xdf, 0x8f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x9b, 0xab, 0x14, 0x1c, 0x8f, 0x05, 0x00, 0x00,
}

func (m *HardwareSpecs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HardwareSpecs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HardwareSpecs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Storage != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.Storage))
		i--
		dAtA[i] = 0x18
	}
	if m.Ram != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.Ram))
		i--
		dAtA[i] = 0x10
	}
	if m.Cpus != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.Cpus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MediaNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Leased {
		i--
		if m.Leased {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintMedianode(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintMedianode(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	{
		size, err := m.LeaseAmountPerDay.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMedianode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.HardwareSpecs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMedianode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMedianode(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintMedianode(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Lease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeaseStatus != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.LeaseStatus))
		i--
		dAtA[i] = 0x38
	}
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LeaseExpiry, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LeaseExpiry):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintMedianode(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x32
	if m.LeasedDays != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.LeasedDays))
		i--
		dAtA[i] = 0x28
	}
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LeasedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LeasedAt):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintMedianode(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.LeaseAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMedianode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.LeasedTo) > 0 {
		i -= len(m.LeasedTo)
		copy(dAtA[i:], m.LeasedTo)
		i = encodeVarintMedianode(dAtA, i, uint64(len(m.LeasedTo)))
		i--
		dAtA[i] = 0x12
	}
	if m.MediaNodeId != 0 {
		i = encodeVarintMedianode(dAtA, i, uint64(m.MediaNodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMedianode(dAtA []byte, offset int, v uint64) int {
	offset -= sovMedianode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HardwareSpecs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cpus != 0 {
		n += 1 + sovMedianode(uint64(m.Cpus))
	}
	if m.Ram != 0 {
		n += 1 + sovMedianode(uint64(m.Ram))
	}
	if m.Storage != 0 {
		n += 1 + sovMedianode(uint64(m.Storage))
	}
	return n
}

func (m *MediaNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMedianode(uint64(m.Id))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMedianode(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMedianode(uint64(l))
	}
	l = m.HardwareSpecs.Size()
	n += 1 + l + sovMedianode(uint64(l))
	l = m.LeaseAmountPerDay.Size()
	n += 1 + l + sovMedianode(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovMedianode(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovMedianode(uint64(l))
	if m.Leased {
		n += 2
	}
	return n
}

func (m *Lease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MediaNodeId != 0 {
		n += 1 + sovMedianode(uint64(m.MediaNodeId))
	}
	l = len(m.LeasedTo)
	if l > 0 {
		n += 1 + l + sovMedianode(uint64(l))
	}
	l = m.LeaseAmount.Size()
	n += 1 + l + sovMedianode(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LeasedAt)
	n += 1 + l + sovMedianode(uint64(l))
	if m.LeasedDays != 0 {
		n += 1 + sovMedianode(uint64(m.LeasedDays))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LeaseExpiry)
	n += 1 + l + sovMedianode(uint64(l))
	if m.LeaseStatus != 0 {
		n += 1 + sovMedianode(uint64(m.LeaseStatus))
	}
	return n
}

func sovMedianode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMedianode(x uint64) (n int) {
	return sovMedianode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HardwareSpecs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedianode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HardwareSpecs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HardwareSpecs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpus", wireType)
			}
			m.Cpus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cpus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ram", wireType)
			}
			m.Ram = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ram |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			m.Storage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Storage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMedianode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedianode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedianode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HardwareSpecs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseAmountPerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeaseAmountPerDay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leased", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Leased = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMedianode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedianode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedianode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaNodeId", wireType)
			}
			m.MediaNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaNodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasedTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeasedTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeaseAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LeasedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasedDays", wireType)
			}
			m.LeasedDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeasedDays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseExpiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedianode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedianode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LeaseExpiry, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseStatus", wireType)
			}
			m.LeaseStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseStatus |= LeaseStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMedianode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedianode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMedianode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMedianode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMedianode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMedianode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMedianode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMedianode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMedianode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMedianode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMedianode = fmt.Errorf("proto: unexpected end of group")
)
