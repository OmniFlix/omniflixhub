// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: OmniFlix/medianode/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterMediaNode represents a message to register a new media node
type MsgRegisterMediaNode struct {
	Url           string        `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	HardwareSpecs HardwareSpecs `protobuf:"bytes,2,opt,name=hardware_specs,json=hardwareSpecs,proto3" json:"hardware_specs"`
	PricePerDay   types.Coin    `protobuf:"bytes,3,opt,name=price_per_day,json=pricePerDay,proto3" json:"price_per_day"`
	Deposit       *types.Coin   `protobuf:"bytes,4,opt,name=deposit,proto3" json:"deposit,omitempty"`
	Sender        string        `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgRegisterMediaNode) Reset()         { *m = MsgRegisterMediaNode{} }
func (m *MsgRegisterMediaNode) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterMediaNode) ProtoMessage()    {}
func (*MsgRegisterMediaNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{0}
}
func (m *MsgRegisterMediaNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterMediaNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterMediaNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterMediaNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterMediaNode.Merge(m, src)
}
func (m *MsgRegisterMediaNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterMediaNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterMediaNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterMediaNode proto.InternalMessageInfo

func (m *MsgRegisterMediaNode) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MsgRegisterMediaNode) GetHardwareSpecs() HardwareSpecs {
	if m != nil {
		return m.HardwareSpecs
	}
	return HardwareSpecs{}
}

func (m *MsgRegisterMediaNode) GetPricePerDay() types.Coin {
	if m != nil {
		return m.PricePerDay
	}
	return types.Coin{}
}

func (m *MsgRegisterMediaNode) GetDeposit() *types.Coin {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *MsgRegisterMediaNode) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgRegisterMediaNodeResponse defines the response for registering a media node
type MsgRegisterMediaNodeResponse struct {
	MediaNodeId uint64 `protobuf:"varint,1,opt,name=media_node_id,json=mediaNodeId,proto3" json:"media_node_id,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgRegisterMediaNodeResponse) Reset()         { *m = MsgRegisterMediaNodeResponse{} }
func (m *MsgRegisterMediaNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterMediaNodeResponse) ProtoMessage()    {}
func (*MsgRegisterMediaNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{1}
}
func (m *MsgRegisterMediaNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterMediaNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterMediaNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterMediaNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterMediaNodeResponse.Merge(m, src)
}
func (m *MsgRegisterMediaNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterMediaNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterMediaNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterMediaNodeResponse proto.InternalMessageInfo

func (m *MsgRegisterMediaNodeResponse) GetMediaNodeId() uint64 {
	if m != nil {
		return m.MediaNodeId
	}
	return 0
}

func (m *MsgRegisterMediaNodeResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// MsgUpdateMediaNode represents a message to update an existing media node only if it's not leased
type MsgUpdateMediaNode struct {
	Id            uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	HardwareSpecs HardwareSpecs `protobuf:"bytes,2,opt,name=hardware_specs,json=hardwareSpecs,proto3" json:"hardware_specs"`
	PricePerDay   types.Coin    `protobuf:"bytes,3,opt,name=price_per_day,json=pricePerDay,proto3" json:"price_per_day"`
	Sender        string        `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgUpdateMediaNode) Reset()         { *m = MsgUpdateMediaNode{} }
func (m *MsgUpdateMediaNode) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMediaNode) ProtoMessage()    {}
func (*MsgUpdateMediaNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{2}
}
func (m *MsgUpdateMediaNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMediaNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMediaNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMediaNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMediaNode.Merge(m, src)
}
func (m *MsgUpdateMediaNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMediaNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMediaNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMediaNode proto.InternalMessageInfo

func (m *MsgUpdateMediaNode) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgUpdateMediaNode) GetHardwareSpecs() HardwareSpecs {
	if m != nil {
		return m.HardwareSpecs
	}
	return HardwareSpecs{}
}

func (m *MsgUpdateMediaNode) GetPricePerDay() types.Coin {
	if m != nil {
		return m.PricePerDay
	}
	return types.Coin{}
}

func (m *MsgUpdateMediaNode) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgUpdateMediaNodeResponse defines the response for updating a media node
type MsgUpdateMediaNodeResponse struct {
}

func (m *MsgUpdateMediaNodeResponse) Reset()         { *m = MsgUpdateMediaNodeResponse{} }
func (m *MsgUpdateMediaNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMediaNodeResponse) ProtoMessage()    {}
func (*MsgUpdateMediaNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{3}
}
func (m *MsgUpdateMediaNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMediaNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMediaNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMediaNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMediaNodeResponse.Merge(m, src)
}
func (m *MsgUpdateMediaNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMediaNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMediaNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMediaNodeResponse proto.InternalMessageInfo

// MsgLeaseMediaNode represents a message to lease a media node
type MsgLeaseMediaNode struct {
	MediaNodeId uint64     `protobuf:"varint,1,opt,name=media_node_id,json=mediaNodeId,proto3" json:"media_node_id,omitempty"`
	LeaseDays   uint64     `protobuf:"varint,2,opt,name=lease_days,json=leaseDays,proto3" json:"lease_days,omitempty"`
	Amount      types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	Sender      string     `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgLeaseMediaNode) Reset()         { *m = MsgLeaseMediaNode{} }
func (m *MsgLeaseMediaNode) String() string { return proto.CompactTextString(m) }
func (*MsgLeaseMediaNode) ProtoMessage()    {}
func (*MsgLeaseMediaNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{4}
}
func (m *MsgLeaseMediaNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaseMediaNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaseMediaNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaseMediaNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaseMediaNode.Merge(m, src)
}
func (m *MsgLeaseMediaNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaseMediaNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaseMediaNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaseMediaNode proto.InternalMessageInfo

func (m *MsgLeaseMediaNode) GetMediaNodeId() uint64 {
	if m != nil {
		return m.MediaNodeId
	}
	return 0
}

func (m *MsgLeaseMediaNode) GetLeaseDays() uint64 {
	if m != nil {
		return m.LeaseDays
	}
	return 0
}

func (m *MsgLeaseMediaNode) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgLeaseMediaNode) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgLeaseMediaNodeResponse defines the response for leasing a media node
type MsgLeaseMediaNodeResponse struct {
	Lease *Lease `protobuf:"bytes,1,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (m *MsgLeaseMediaNodeResponse) Reset()         { *m = MsgLeaseMediaNodeResponse{} }
func (m *MsgLeaseMediaNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLeaseMediaNodeResponse) ProtoMessage()    {}
func (*MsgLeaseMediaNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{5}
}
func (m *MsgLeaseMediaNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaseMediaNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaseMediaNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaseMediaNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaseMediaNodeResponse.Merge(m, src)
}
func (m *MsgLeaseMediaNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaseMediaNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaseMediaNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaseMediaNodeResponse proto.InternalMessageInfo

func (m *MsgLeaseMediaNodeResponse) GetLease() *Lease {
	if m != nil {
		return m.Lease
	}
	return nil
}

// MsgCancelLease represents a message to cancel an active lease
type MsgCancelLease struct {
	MediaNodeId uint64 `protobuf:"varint,1,opt,name=media_node_id,json=mediaNodeId,proto3" json:"media_node_id,omitempty"`
	Sender      string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCancelLease) Reset()         { *m = MsgCancelLease{} }
func (m *MsgCancelLease) String() string { return proto.CompactTextString(m) }
func (*MsgCancelLease) ProtoMessage()    {}
func (*MsgCancelLease) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{6}
}
func (m *MsgCancelLease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelLease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelLease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelLease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelLease.Merge(m, src)
}
func (m *MsgCancelLease) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelLease) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelLease.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelLease proto.InternalMessageInfo

func (m *MsgCancelLease) GetMediaNodeId() uint64 {
	if m != nil {
		return m.MediaNodeId
	}
	return 0
}

func (m *MsgCancelLease) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgCancelLeaseResponse defines the response for canceling a lease
type MsgCancelLeaseResponse struct {
}

func (m *MsgCancelLeaseResponse) Reset()         { *m = MsgCancelLeaseResponse{} }
func (m *MsgCancelLeaseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelLeaseResponse) ProtoMessage()    {}
func (*MsgCancelLeaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{7}
}
func (m *MsgCancelLeaseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelLeaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelLeaseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelLeaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelLeaseResponse.Merge(m, src)
}
func (m *MsgCancelLeaseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelLeaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelLeaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelLeaseResponse proto.InternalMessageInfo

// MsgDepositMediaNode represents a message to deposit funds for a media node
type MsgDepositMediaNode struct {
	MediaNodeId uint64     `protobuf:"varint,1,opt,name=media_node_id,json=mediaNodeId,proto3" json:"media_node_id,omitempty"`
	Amount      types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	Sender      string     `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgDepositMediaNode) Reset()         { *m = MsgDepositMediaNode{} }
func (m *MsgDepositMediaNode) String() string { return proto.CompactTextString(m) }
func (*MsgDepositMediaNode) ProtoMessage()    {}
func (*MsgDepositMediaNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{8}
}
func (m *MsgDepositMediaNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositMediaNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositMediaNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositMediaNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositMediaNode.Merge(m, src)
}
func (m *MsgDepositMediaNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositMediaNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositMediaNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositMediaNode proto.InternalMessageInfo

func (m *MsgDepositMediaNode) GetMediaNodeId() uint64 {
	if m != nil {
		return m.MediaNodeId
	}
	return 0
}

func (m *MsgDepositMediaNode) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgDepositMediaNode) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgDepositMediaNodeResponse defines the response for depositing funds for a media node
type MsgDepositMediaNodeResponse struct {
	MedianodeId     uint64      `protobuf:"varint,1,opt,name=medianode_id,json=medianodeId,proto3" json:"medianode_id,omitempty"`
	TotalDeposit    *types.Coin `protobuf:"bytes,2,opt,name=total_deposit,json=totalDeposit,proto3" json:"total_deposit,omitempty"`
	MedianodeStatus string      `protobuf:"bytes,3,opt,name=medianode_status,json=medianodeStatus,proto3" json:"medianode_status,omitempty"`
}

func (m *MsgDepositMediaNodeResponse) Reset()         { *m = MsgDepositMediaNodeResponse{} }
func (m *MsgDepositMediaNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositMediaNodeResponse) ProtoMessage()    {}
func (*MsgDepositMediaNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{9}
}
func (m *MsgDepositMediaNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositMediaNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositMediaNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositMediaNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositMediaNodeResponse.Merge(m, src)
}
func (m *MsgDepositMediaNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositMediaNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositMediaNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositMediaNodeResponse proto.InternalMessageInfo

func (m *MsgDepositMediaNodeResponse) GetMedianodeId() uint64 {
	if m != nil {
		return m.MedianodeId
	}
	return 0
}

func (m *MsgDepositMediaNodeResponse) GetTotalDeposit() *types.Coin {
	if m != nil {
		return m.TotalDeposit
	}
	return nil
}

func (m *MsgDepositMediaNodeResponse) GetMedianodeStatus() string {
	if m != nil {
		return m.MedianodeStatus
	}
	return ""
}

// MsgCloseMediaNode represents a message to close a media node
type MsgCloseMediaNode struct {
	MediaNodeId uint64 `protobuf:"varint,1,opt,name=media_node_id,json=mediaNodeId,proto3" json:"media_node_id,omitempty"`
	Sender      string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCloseMediaNode) Reset()         { *m = MsgCloseMediaNode{} }
func (m *MsgCloseMediaNode) String() string { return proto.CompactTextString(m) }
func (*MsgCloseMediaNode) ProtoMessage()    {}
func (*MsgCloseMediaNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{10}
}
func (m *MsgCloseMediaNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseMediaNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseMediaNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseMediaNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseMediaNode.Merge(m, src)
}
func (m *MsgCloseMediaNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseMediaNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseMediaNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseMediaNode proto.InternalMessageInfo

func (m *MsgCloseMediaNode) GetMediaNodeId() uint64 {
	if m != nil {
		return m.MediaNodeId
	}
	return 0
}

func (m *MsgCloseMediaNode) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgCloseMediaNodeResponse struct {
}

func (m *MsgCloseMediaNodeResponse) Reset()         { *m = MsgCloseMediaNodeResponse{} }
func (m *MsgCloseMediaNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCloseMediaNodeResponse) ProtoMessage()    {}
func (*MsgCloseMediaNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{11}
}
func (m *MsgCloseMediaNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseMediaNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseMediaNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseMediaNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseMediaNodeResponse.Merge(m, src)
}
func (m *MsgCloseMediaNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseMediaNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseMediaNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseMediaNodeResponse proto.InternalMessageInfo

type MsgUpdateParams struct {
	// authority is the address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/itc parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{12}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{13}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterMediaNode)(nil), "OmniFlix.medianode.v1beta1.MsgRegisterMediaNode")
	proto.RegisterType((*MsgRegisterMediaNodeResponse)(nil), "OmniFlix.medianode.v1beta1.MsgRegisterMediaNodeResponse")
	proto.RegisterType((*MsgUpdateMediaNode)(nil), "OmniFlix.medianode.v1beta1.MsgUpdateMediaNode")
	proto.RegisterType((*MsgUpdateMediaNodeResponse)(nil), "OmniFlix.medianode.v1beta1.MsgUpdateMediaNodeResponse")
	proto.RegisterType((*MsgLeaseMediaNode)(nil), "OmniFlix.medianode.v1beta1.MsgLeaseMediaNode")
	proto.RegisterType((*MsgLeaseMediaNodeResponse)(nil), "OmniFlix.medianode.v1beta1.MsgLeaseMediaNodeResponse")
	proto.RegisterType((*MsgCancelLease)(nil), "OmniFlix.medianode.v1beta1.MsgCancelLease")
	proto.RegisterType((*MsgCancelLeaseResponse)(nil), "OmniFlix.medianode.v1beta1.MsgCancelLeaseResponse")
	proto.RegisterType((*MsgDepositMediaNode)(nil), "OmniFlix.medianode.v1beta1.MsgDepositMediaNode")
	proto.RegisterType((*MsgDepositMediaNodeResponse)(nil), "OmniFlix.medianode.v1beta1.MsgDepositMediaNodeResponse")
	proto.RegisterType((*MsgCloseMediaNode)(nil), "OmniFlix.medianode.v1beta1.MsgCloseMediaNode")
	proto.RegisterType((*MsgCloseMediaNodeResponse)(nil), "OmniFlix.medianode.v1beta1.MsgCloseMediaNodeResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "OmniFlix.medianode.v1beta1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "OmniFlix.medianode.v1beta1.MsgUpdateParamsResponse")
}

func init() {
	proto.RegisterFile("OmniFlix/medianode/v1beta1/tx.proto", fileDescriptor_256d46440b2f0bcd)
}

var fileDescriptor_256d46440b2f0bcd = []byte{
	// 943 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0xd3, 0x6c, 0x50, 0x5f, 0xda, 0xb4, 0x35, 0xd5, 0x6e, 0xe2, 0x2e, 0xd9, 0x6e, 0x38,
	0xd0, 0x66, 0xd5, 0x98, 0xb6, 0xd0, 0xa2, 0x3d, 0x20, 0x68, 0x2b, 0x04, 0x12, 0x59, 0x56, 0x2e,
	0x70, 0xd8, 0x4b, 0x34, 0x89, 0x07, 0x67, 0xa4, 0xd8, 0x63, 0x79, 0x26, 0xa5, 0x41, 0x20, 0x24,
	0xc4, 0x89, 0x13, 0x77, 0xfe, 0x04, 0x2e, 0x7b, 0x40, 0x5c, 0xb9, 0xee, 0xb1, 0x70, 0xe2, 0x84,
	0x50, 0x7b, 0xd8, 0x7f, 0x03, 0x79, 0x66, 0x32, 0x76, 0xdc, 0x34, 0x3f, 0x38, 0xed, 0xa5, 0x8d,
	0x3d, 0xdf, 0x7b, 0xdf, 0xfb, 0xbe, 0x37, 0x6f, 0xc6, 0xf0, 0xe6, 0x67, 0x7e, 0x40, 0x3e, 0xea,
	0x91, 0x0b, 0xdb, 0xc7, 0x2e, 0x41, 0x01, 0x75, 0xb1, 0x7d, 0xbe, 0xd7, 0xc6, 0x1c, 0xed, 0xd9,
	0xfc, 0xa2, 0x11, 0x46, 0x94, 0x53, 0xd3, 0x1a, 0x82, 0x1a, 0x1a, 0xd4, 0x50, 0x20, 0x6b, 0xc3,
	0xa3, 0x1e, 0x15, 0x30, 0x3b, 0xfe, 0x25, 0x23, 0xac, 0x7b, 0x1d, 0xca, 0x7c, 0xca, 0x6c, 0x9f,
	0x79, 0xf6, 0xf9, 0x5e, 0xfc, 0x4f, 0x2d, 0x54, 0xd5, 0x42, 0x1b, 0xb1, 0x84, 0xa8, 0x43, 0x49,
	0xa0, 0xd6, 0x2b, 0x72, 0xbd, 0x25, 0x33, 0xca, 0x07, 0xb5, 0xb4, 0x8e, 0x7c, 0x12, 0x50, 0x5b,
	0xfc, 0x55, 0xaf, 0xea, 0x13, 0xaa, 0x4f, 0x4a, 0x95, 0xd8, 0xb7, 0x26, 0x60, 0x43, 0x14, 0x21,
	0x5f, 0xf1, 0xd4, 0xfe, 0xc8, 0xc1, 0x46, 0x93, 0x79, 0x0e, 0xf6, 0x08, 0xe3, 0x38, 0x6a, 0xc6,
	0xe8, 0x27, 0xd4, 0xc5, 0xe6, 0x1a, 0x2c, 0xf6, 0xa3, 0x5e, 0xd9, 0xd8, 0x32, 0xb6, 0x97, 0x9c,
	0xf8, 0xa7, 0xf9, 0x25, 0x94, 0xba, 0x28, 0x72, 0xbf, 0x46, 0x11, 0x6e, 0xb1, 0x10, 0x77, 0x58,
	0x39, 0xb7, 0x65, 0x6c, 0x17, 0xf7, 0x77, 0x1a, 0xb7, 0x3b, 0xd6, 0xf8, 0x58, 0x45, 0x9c, 0xc5,
	0x01, 0xc7, 0xf9, 0x17, 0xff, 0x3c, 0x58, 0x70, 0x56, 0xba, 0xe9, 0x97, 0xe6, 0x09, 0xac, 0x84,
	0x11, 0xe9, 0xe0, 0x56, 0x88, 0xa3, 0x96, 0x8b, 0x06, 0xe5, 0x45, 0x91, 0xb6, 0xd2, 0x50, 0x86,
	0xc4, 0xee, 0xe9, 0x7c, 0x27, 0x94, 0x04, 0x2a, 0x4d, 0x51, 0x44, 0x3d, 0xc5, 0xd1, 0x29, 0x1a,
	0x98, 0x07, 0xf0, 0x9a, 0x8b, 0x43, 0xca, 0x08, 0x2f, 0xe7, 0xa7, 0x84, 0x3b, 0x43, 0xa4, 0x79,
	0x17, 0x0a, 0x0c, 0x07, 0x2e, 0x8e, 0xca, 0x77, 0x84, 0x4c, 0xf5, 0xf4, 0xf8, 0xd1, 0x0f, 0x2f,
	0x9f, 0xd7, 0xd5, 0xc3, 0x4f, 0x2f, 0x9f, 0xd7, 0x37, 0xb5, 0x9b, 0x91, 0xf2, 0x69, 0x57, 0x2b,
	0xad, 0x3d, 0x83, 0xfb, 0xe3, 0x0c, 0x74, 0x30, 0x0b, 0x69, 0xc0, 0xb0, 0x59, 0x83, 0x15, 0x01,
	0x6e, 0xc5, 0xe8, 0x16, 0x71, 0x85, 0xa5, 0x79, 0xa7, 0xe8, 0x0f, 0x91, 0x9f, 0xb8, 0xa2, 0x10,
	0x8e, 0x78, 0x5f, 0x5a, 0x1a, 0x17, 0x22, 0x9e, 0x6a, 0x3f, 0xe6, 0xc0, 0x6c, 0x32, 0xef, 0x8b,
	0xd0, 0x45, 0x1c, 0x27, 0xbd, 0x29, 0x41, 0x4e, 0xe7, 0xc9, 0x11, 0xf7, 0xd5, 0xee, 0x4c, 0x62,
	0x72, 0x7e, 0xc4, 0xe4, 0x9d, 0x8c, 0xc9, 0x15, 0x6d, 0x72, 0x5f, 0xc8, 0x4d, 0x59, 0x7c, 0x1f,
	0xac, 0x9b, 0x2e, 0x0c, 0x0d, 0xae, 0xfd, 0x69, 0xc0, 0x7a, 0x93, 0x79, 0x9f, 0x62, 0xc4, 0x52,
	0x1e, 0xcd, 0x62, 0xfb, 0x1b, 0x00, 0xbd, 0x38, 0x2a, 0xd6, 0x26, 0x3d, 0xcb, 0x3b, 0x4b, 0xe2,
	0xcd, 0x29, 0x1a, 0x30, 0xf3, 0x08, 0x0a, 0xc8, 0xa7, 0xfd, 0x80, 0xcf, 0xaa, 0x5b, 0xc1, 0x6f,
	0x95, 0xbc, 0x9d, 0x91, 0x5c, 0xd6, 0x92, 0x05, 0x69, 0x4a, 0xf1, 0xe7, 0x50, 0xb9, 0x21, 0x49,
	0xef, 0xa8, 0x23, 0xb8, 0x23, 0xf0, 0x42, 0x52, 0x71, 0xff, 0xe1, 0xa4, 0x2e, 0x8b, 0x14, 0x8e,
	0xc4, 0xd7, 0xbe, 0x83, 0x52, 0x93, 0x79, 0x27, 0x28, 0xe8, 0xe0, 0x9e, 0x58, 0x98, 0x79, 0x73,
	0x4a, 0x35, 0xb9, 0x11, 0x35, 0x76, 0x46, 0xcd, 0x03, 0xad, 0xa6, 0x23, 0x18, 0x12, 0x39, 0xbb,
	0x92, 0xbe, 0x0c, 0x77, 0x47, 0xe9, 0x75, 0x0b, 0x7f, 0x37, 0xe0, 0xf5, 0x26, 0xf3, 0x4e, 0xe5,
	0x5c, 0xce, 0xd7, 0xc4, 0xa4, 0x4b, 0xb9, 0xff, 0xdb, 0xa5, 0xc5, 0x11, 0x5d, 0xf5, 0x8c, 0x2e,
	0x7d, 0x21, 0xd8, 0xea, 0xdc, 0x48, 0xf5, 0xe9, 0x57, 0x03, 0x36, 0xc7, 0x14, 0xae, 0x5b, 0xf5,
	0x10, 0x96, 0x35, 0x38, 0x5b, 0x7f, 0x20, 0xeb, 0x7f, 0x1f, 0x56, 0x38, 0xe5, 0xa8, 0xd7, 0x1a,
	0x9e, 0x5f, 0xd3, 0x64, 0x38, 0xcb, 0x02, 0xaf, 0x38, 0xcd, 0x1d, 0x58, 0x4b, 0x28, 0xd4, 0x29,
	0x22, 0x05, 0xad, 0xea, 0xf7, 0x67, 0xf2, 0x38, 0xf9, 0x46, 0x0c, 0xca, 0x49, 0x8f, 0xce, 0x3b,
	0x28, 0xb7, 0x6d, 0x81, 0xb1, 0x33, 0xbc, 0x25, 0xf7, 0x40, 0xcc, 0x92, 0x72, 0x6a, 0x53, 0xec,
	0xe8, 0x51, 0x6e, 0xdd, 0xff, 0x5f, 0x0c, 0x58, 0xd5, 0x13, 0xfe, 0x54, 0xdc, 0x4f, 0xe6, 0x21,
	0x2c, 0xa1, 0x3e, 0xef, 0xd2, 0x88, 0xf0, 0x81, 0xbc, 0x86, 0x8e, 0xcb, 0x7f, 0xfd, 0xb6, 0xbb,
	0xa1, 0x6c, 0xf9, 0xd0, 0x75, 0x23, 0xcc, 0xd8, 0x19, 0x8f, 0x48, 0xe0, 0x39, 0x09, 0xd4, 0xfc,
	0x00, 0x0a, 0xf2, 0x86, 0x53, 0x46, 0xd6, 0x26, 0x8d, 0x87, 0xe4, 0x1a, 0x6e, 0x0c, 0x19, 0xf7,
	0xb8, 0x14, 0xab, 0x4a, 0x32, 0xd6, 0x2a, 0x70, 0x2f, 0x53, 0xdc, 0xb0, 0xf0, 0xfd, 0xcb, 0x02,
	0x2c, 0x36, 0x99, 0x67, 0x7e, 0x0f, 0xeb, 0x37, 0xaf, 0xd0, 0xb7, 0x27, 0x31, 0x8f, 0xbb, 0x33,
	0xac, 0xf7, 0xe6, 0x8d, 0xd0, 0x1b, 0x6d, 0x00, 0xab, 0xd9, 0x5b, 0xa2, 0x31, 0x25, 0x59, 0x06,
	0x6f, 0x1d, 0xce, 0x87, 0xd7, 0xd4, 0xe7, 0x50, 0xca, 0x9c, 0xbd, 0xbb, 0x53, 0x32, 0x8d, 0xc2,
	0xad, 0x77, 0xe7, 0x82, 0x6b, 0x5e, 0x1f, 0x8a, 0xe9, 0xa3, 0xac, 0x3e, 0x25, 0x4b, 0x0a, 0x6b,
	0xed, 0xcf, 0x8e, 0xd5, 0x74, 0xdf, 0xc2, 0xda, 0x8d, 0xf3, 0xc9, 0x9e, 0x92, 0x27, 0x1b, 0x60,
	0x1d, 0xcd, 0x19, 0x90, 0x36, 0x39, 0x33, 0xb7, 0xd3, 0x4c, 0x1e, 0x85, 0x4f, 0x35, 0x79, 0xfc,
	0x64, 0x9a, 0x21, 0x2c, 0x8f, 0x4c, 0xe5, 0xa3, 0x99, 0x36, 0x89, 0x04, 0x5b, 0x07, 0x73, 0x80,
	0x87, 0x8c, 0xc7, 0x4f, 0x5e, 0x5c, 0x55, 0x8d, 0xcb, 0xab, 0xaa, 0xf1, 0xef, 0x55, 0xd5, 0xf8,
	0xf9, 0xba, 0xba, 0x70, 0x79, 0x5d, 0x5d, 0xf8, 0xfb, 0xba, 0xba, 0xf0, 0xec, 0x1d, 0x8f, 0xf0,
	0x6e, 0xbf, 0xdd, 0xe8, 0x50, 0xdf, 0xd6, 0x67, 0x32, 0xf5, 0x03, 0xf2, 0x55, 0x8f, 0x5c, 0x74,
	0xfb, 0x6d, 0xfb, 0xfc, 0xd0, 0x4e, 0x7f, 0xf0, 0xf2, 0x41, 0x88, 0x59, 0xbb, 0x20, 0x3e, 0x74,
	0x0f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x76, 0xe1, 0x75, 0x68, 0xfd, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterMediaNode registers a new media node
	RegisterMediaNode(ctx context.Context, in *MsgRegisterMediaNode, opts ...grpc.CallOption) (*MsgRegisterMediaNodeResponse, error)
	// UpdateMediaNode updates an existing media node
	UpdateMediaNode(ctx context.Context, in *MsgUpdateMediaNode, opts ...grpc.CallOption) (*MsgUpdateMediaNodeResponse, error)
	// LeaseMediaNode creates a new lease for a media node
	LeaseMediaNode(ctx context.Context, in *MsgLeaseMediaNode, opts ...grpc.CallOption) (*MsgLeaseMediaNodeResponse, error)
	// CancelLease cancels an active lease
	CancelLease(ctx context.Context, in *MsgCancelLease, opts ...grpc.CallOption) (*MsgCancelLeaseResponse, error)
	// DepositMediaNode deposits funds for a media node
	DepositMediaNode(ctx context.Context, in *MsgDepositMediaNode, opts ...grpc.CallOption) (*MsgDepositMediaNodeResponse, error)
	// CloseMediaNode closes a media node
	CloseMediaNode(ctx context.Context, in *MsgCloseMediaNode, opts ...grpc.CallOption) (*MsgCloseMediaNodeResponse, error)
	// UpdateParams
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterMediaNode(ctx context.Context, in *MsgRegisterMediaNode, opts ...grpc.CallOption) (*MsgRegisterMediaNodeResponse, error) {
	out := new(MsgRegisterMediaNodeResponse)
	err := c.cc.Invoke(ctx, "/OmniFlix.medianode.v1beta1.Msg/RegisterMediaNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMediaNode(ctx context.Context, in *MsgUpdateMediaNode, opts ...grpc.CallOption) (*MsgUpdateMediaNodeResponse, error) {
	out := new(MsgUpdateMediaNodeResponse)
	err := c.cc.Invoke(ctx, "/OmniFlix.medianode.v1beta1.Msg/UpdateMediaNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LeaseMediaNode(ctx context.Context, in *MsgLeaseMediaNode, opts ...grpc.CallOption) (*MsgLeaseMediaNodeResponse, error) {
	out := new(MsgLeaseMediaNodeResponse)
	err := c.cc.Invoke(ctx, "/OmniFlix.medianode.v1beta1.Msg/LeaseMediaNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelLease(ctx context.Context, in *MsgCancelLease, opts ...grpc.CallOption) (*MsgCancelLeaseResponse, error) {
	out := new(MsgCancelLeaseResponse)
	err := c.cc.Invoke(ctx, "/OmniFlix.medianode.v1beta1.Msg/CancelLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositMediaNode(ctx context.Context, in *MsgDepositMediaNode, opts ...grpc.CallOption) (*MsgDepositMediaNodeResponse, error) {
	out := new(MsgDepositMediaNodeResponse)
	err := c.cc.Invoke(ctx, "/OmniFlix.medianode.v1beta1.Msg/DepositMediaNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CloseMediaNode(ctx context.Context, in *MsgCloseMediaNode, opts ...grpc.CallOption) (*MsgCloseMediaNodeResponse, error) {
	out := new(MsgCloseMediaNodeResponse)
	err := c.cc.Invoke(ctx, "/OmniFlix.medianode.v1beta1.Msg/CloseMediaNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/OmniFlix.medianode.v1beta1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterMediaNode registers a new media node
	RegisterMediaNode(context.Context, *MsgRegisterMediaNode) (*MsgRegisterMediaNodeResponse, error)
	// UpdateMediaNode updates an existing media node
	UpdateMediaNode(context.Context, *MsgUpdateMediaNode) (*MsgUpdateMediaNodeResponse, error)
	// LeaseMediaNode creates a new lease for a media node
	LeaseMediaNode(context.Context, *MsgLeaseMediaNode) (*MsgLeaseMediaNodeResponse, error)
	// CancelLease cancels an active lease
	CancelLease(context.Context, *MsgCancelLease) (*MsgCancelLeaseResponse, error)
	// DepositMediaNode deposits funds for a media node
	DepositMediaNode(context.Context, *MsgDepositMediaNode) (*MsgDepositMediaNodeResponse, error)
	// CloseMediaNode closes a media node
	CloseMediaNode(context.Context, *MsgCloseMediaNode) (*MsgCloseMediaNodeResponse, error)
	// UpdateParams
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterMediaNode(ctx context.Context, req *MsgRegisterMediaNode) (*MsgRegisterMediaNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMediaNode not implemented")
}
func (*UnimplementedMsgServer) UpdateMediaNode(ctx context.Context, req *MsgUpdateMediaNode) (*MsgUpdateMediaNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMediaNode not implemented")
}
func (*UnimplementedMsgServer) LeaseMediaNode(ctx context.Context, req *MsgLeaseMediaNode) (*MsgLeaseMediaNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaseMediaNode not implemented")
}
func (*UnimplementedMsgServer) CancelLease(ctx context.Context, req *MsgCancelLease) (*MsgCancelLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLease not implemented")
}
func (*UnimplementedMsgServer) DepositMediaNode(ctx context.Context, req *MsgDepositMediaNode) (*MsgDepositMediaNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositMediaNode not implemented")
}
func (*UnimplementedMsgServer) CloseMediaNode(ctx context.Context, req *MsgCloseMediaNode) (*MsgCloseMediaNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseMediaNode not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterMediaNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterMediaNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterMediaNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OmniFlix.medianode.v1beta1.Msg/RegisterMediaNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterMediaNode(ctx, req.(*MsgRegisterMediaNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMediaNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMediaNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMediaNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OmniFlix.medianode.v1beta1.Msg/UpdateMediaNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMediaNode(ctx, req.(*MsgUpdateMediaNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LeaseMediaNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLeaseMediaNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LeaseMediaNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OmniFlix.medianode.v1beta1.Msg/LeaseMediaNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LeaseMediaNode(ctx, req.(*MsgLeaseMediaNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelLease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OmniFlix.medianode.v1beta1.Msg/CancelLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelLease(ctx, req.(*MsgCancelLease))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositMediaNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositMediaNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositMediaNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OmniFlix.medianode.v1beta1.Msg/DepositMediaNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositMediaNode(ctx, req.(*MsgDepositMediaNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CloseMediaNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCloseMediaNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CloseMediaNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OmniFlix.medianode.v1beta1.Msg/CloseMediaNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CloseMediaNode(ctx, req.(*MsgCloseMediaNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OmniFlix.medianode.v1beta1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OmniFlix.medianode.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMediaNode",
			Handler:    _Msg_RegisterMediaNode_Handler,
		},
		{
			MethodName: "UpdateMediaNode",
			Handler:    _Msg_UpdateMediaNode_Handler,
		},
		{
			MethodName: "LeaseMediaNode",
			Handler:    _Msg_LeaseMediaNode_Handler,
		},
		{
			MethodName: "CancelLease",
			Handler:    _Msg_CancelLease_Handler,
		},
		{
			MethodName: "DepositMediaNode",
			Handler:    _Msg_DepositMediaNode_Handler,
		},
		{
			MethodName: "CloseMediaNode",
			Handler:    _Msg_CloseMediaNode_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OmniFlix/medianode/v1beta1/tx.proto",
}

func (m *MsgRegisterMediaNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterMediaNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterMediaNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Deposit != nil {
		{
			size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.PricePerDay.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.HardwareSpecs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterMediaNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterMediaNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterMediaNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.MediaNodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MediaNodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMediaNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMediaNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMediaNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.PricePerDay.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.HardwareSpecs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMediaNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMediaNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMediaNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLeaseMediaNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaseMediaNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaseMediaNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.LeaseDays != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LeaseDays))
		i--
		dAtA[i] = 0x10
	}
	if m.MediaNodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MediaNodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgLeaseMediaNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaseMediaNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaseMediaNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lease != nil {
		{
			size, err := m.Lease.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelLease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelLease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelLease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.MediaNodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MediaNodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelLeaseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelLeaseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelLeaseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositMediaNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositMediaNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositMediaNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.MediaNodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MediaNodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositMediaNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositMediaNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositMediaNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MedianodeStatus) > 0 {
		i -= len(m.MedianodeStatus)
		copy(dAtA[i:], m.MedianodeStatus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MedianodeStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TotalDeposit != nil {
		{
			size, err := m.TotalDeposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MedianodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MedianodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCloseMediaNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseMediaNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseMediaNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.MediaNodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MediaNodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCloseMediaNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseMediaNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseMediaNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterMediaNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.HardwareSpecs.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.PricePerDay.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Deposit != nil {
		l = m.Deposit.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterMediaNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MediaNodeId != 0 {
		n += 1 + sovTx(uint64(m.MediaNodeId))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMediaNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = m.HardwareSpecs.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.PricePerDay.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMediaNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLeaseMediaNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MediaNodeId != 0 {
		n += 1 + sovTx(uint64(m.MediaNodeId))
	}
	if m.LeaseDays != 0 {
		n += 1 + sovTx(uint64(m.LeaseDays))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLeaseMediaNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lease != nil {
		l = m.Lease.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelLease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MediaNodeId != 0 {
		n += 1 + sovTx(uint64(m.MediaNodeId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelLeaseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositMediaNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MediaNodeId != 0 {
		n += 1 + sovTx(uint64(m.MediaNodeId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDepositMediaNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MedianodeId != 0 {
		n += 1 + sovTx(uint64(m.MedianodeId))
	}
	if m.TotalDeposit != nil {
		l = m.TotalDeposit.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MedianodeStatus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCloseMediaNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MediaNodeId != 0 {
		n += 1 + sovTx(uint64(m.MediaNodeId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCloseMediaNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterMediaNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterMediaNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterMediaNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HardwareSpecs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PricePerDay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deposit == nil {
				m.Deposit = &types.Coin{}
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterMediaNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterMediaNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterMediaNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaNodeId", wireType)
			}
			m.MediaNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaNodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMediaNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMediaNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMediaNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HardwareSpecs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PricePerDay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMediaNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMediaNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMediaNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaseMediaNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaseMediaNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaseMediaNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaNodeId", wireType)
			}
			m.MediaNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaNodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseDays", wireType)
			}
			m.LeaseDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseDays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaseMediaNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaseMediaNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaseMediaNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lease", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lease == nil {
				m.Lease = &Lease{}
			}
			if err := m.Lease.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelLease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelLease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelLease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaNodeId", wireType)
			}
			m.MediaNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaNodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelLeaseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelLeaseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelLeaseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositMediaNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositMediaNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositMediaNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaNodeId", wireType)
			}
			m.MediaNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaNodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositMediaNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositMediaNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositMediaNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedianodeId", wireType)
			}
			m.MedianodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedianodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalDeposit == nil {
				m.TotalDeposit = &types.Coin{}
			}
			if err := m.TotalDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedianodeStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MedianodeStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseMediaNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseMediaNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseMediaNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaNodeId", wireType)
			}
			m.MediaNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaNodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseMediaNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseMediaNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseMediaNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
