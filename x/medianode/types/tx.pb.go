// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: OmniFlix/medianode/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterMediaNode represents a message to register a new media node
type MsgRegisterMediaNode struct {
	Creator           string        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Url               string        `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	HardwareSpecs     HardwareSpecs `protobuf:"bytes,3,opt,name=hardware_specs,json=hardwareSpecs,proto3" json:"hardware_specs"`
	LeaseAmountPerDay types.Coin    `protobuf:"bytes,4,opt,name=lease_amount_per_day,json=leaseAmountPerDay,proto3" json:"lease_amount_per_day"`
}

func (m *MsgRegisterMediaNode) Reset()         { *m = MsgRegisterMediaNode{} }
func (m *MsgRegisterMediaNode) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterMediaNode) ProtoMessage()    {}
func (*MsgRegisterMediaNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{0}
}
func (m *MsgRegisterMediaNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterMediaNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterMediaNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterMediaNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterMediaNode.Merge(m, src)
}
func (m *MsgRegisterMediaNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterMediaNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterMediaNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterMediaNode proto.InternalMessageInfo

func (m *MsgRegisterMediaNode) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterMediaNode) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MsgRegisterMediaNode) GetHardwareSpecs() HardwareSpecs {
	if m != nil {
		return m.HardwareSpecs
	}
	return HardwareSpecs{}
}

func (m *MsgRegisterMediaNode) GetLeaseAmountPerDay() types.Coin {
	if m != nil {
		return m.LeaseAmountPerDay
	}
	return types.Coin{}
}

// MsgRegisterMediaNodeResponse defines the response for registering a media node
type MsgRegisterMediaNodeResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgRegisterMediaNodeResponse) Reset()         { *m = MsgRegisterMediaNodeResponse{} }
func (m *MsgRegisterMediaNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterMediaNodeResponse) ProtoMessage()    {}
func (*MsgRegisterMediaNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{1}
}
func (m *MsgRegisterMediaNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterMediaNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterMediaNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterMediaNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterMediaNodeResponse.Merge(m, src)
}
func (m *MsgRegisterMediaNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterMediaNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterMediaNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterMediaNodeResponse proto.InternalMessageInfo

func (m *MsgRegisterMediaNodeResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// MsgUpdateMediaNode represents a message to update an existing media node
type MsgUpdateMediaNode struct {
	Creator           string        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                uint64        `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Url               string        `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	HardwareSpecs     HardwareSpecs `protobuf:"bytes,4,opt,name=hardware_specs,json=hardwareSpecs,proto3" json:"hardware_specs"`
	LeaseAmountPerDay types.Coin    `protobuf:"bytes,5,opt,name=lease_amount_per_day,json=leaseAmountPerDay,proto3" json:"lease_amount_per_day"`
}

func (m *MsgUpdateMediaNode) Reset()         { *m = MsgUpdateMediaNode{} }
func (m *MsgUpdateMediaNode) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMediaNode) ProtoMessage()    {}
func (*MsgUpdateMediaNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{2}
}
func (m *MsgUpdateMediaNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMediaNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMediaNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMediaNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMediaNode.Merge(m, src)
}
func (m *MsgUpdateMediaNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMediaNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMediaNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMediaNode proto.InternalMessageInfo

func (m *MsgUpdateMediaNode) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateMediaNode) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgUpdateMediaNode) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MsgUpdateMediaNode) GetHardwareSpecs() HardwareSpecs {
	if m != nil {
		return m.HardwareSpecs
	}
	return HardwareSpecs{}
}

func (m *MsgUpdateMediaNode) GetLeaseAmountPerDay() types.Coin {
	if m != nil {
		return m.LeaseAmountPerDay
	}
	return types.Coin{}
}

// MsgUpdateMediaNodeResponse defines the response for updating a media node
type MsgUpdateMediaNodeResponse struct {
}

func (m *MsgUpdateMediaNodeResponse) Reset()         { *m = MsgUpdateMediaNodeResponse{} }
func (m *MsgUpdateMediaNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMediaNodeResponse) ProtoMessage()    {}
func (*MsgUpdateMediaNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{3}
}
func (m *MsgUpdateMediaNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMediaNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMediaNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMediaNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMediaNodeResponse.Merge(m, src)
}
func (m *MsgUpdateMediaNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMediaNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMediaNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMediaNodeResponse proto.InternalMessageInfo

// MsgLeaseMediaNode represents a message to lease a media node
type MsgLeaseMediaNode struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MediaNodeId uint64 `protobuf:"varint,2,opt,name=media_node_id,json=mediaNodeId,proto3" json:"media_node_id,omitempty"`
	LeaseDays   uint64 `protobuf:"varint,3,opt,name=lease_days,json=leaseDays,proto3" json:"lease_days,omitempty"`
}

func (m *MsgLeaseMediaNode) Reset()         { *m = MsgLeaseMediaNode{} }
func (m *MsgLeaseMediaNode) String() string { return proto.CompactTextString(m) }
func (*MsgLeaseMediaNode) ProtoMessage()    {}
func (*MsgLeaseMediaNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{4}
}
func (m *MsgLeaseMediaNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaseMediaNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaseMediaNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaseMediaNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaseMediaNode.Merge(m, src)
}
func (m *MsgLeaseMediaNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaseMediaNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaseMediaNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaseMediaNode proto.InternalMessageInfo

func (m *MsgLeaseMediaNode) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgLeaseMediaNode) GetMediaNodeId() uint64 {
	if m != nil {
		return m.MediaNodeId
	}
	return 0
}

func (m *MsgLeaseMediaNode) GetLeaseDays() uint64 {
	if m != nil {
		return m.LeaseDays
	}
	return 0
}

// MsgLeaseMediaNodeResponse defines the response for leasing a media node
type MsgLeaseMediaNodeResponse struct {
}

func (m *MsgLeaseMediaNodeResponse) Reset()         { *m = MsgLeaseMediaNodeResponse{} }
func (m *MsgLeaseMediaNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLeaseMediaNodeResponse) ProtoMessage()    {}
func (*MsgLeaseMediaNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{5}
}
func (m *MsgLeaseMediaNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaseMediaNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaseMediaNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaseMediaNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaseMediaNodeResponse.Merge(m, src)
}
func (m *MsgLeaseMediaNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaseMediaNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaseMediaNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaseMediaNodeResponse proto.InternalMessageInfo

// MsgCancelLease represents a message to cancel an active lease
type MsgCancelLease struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MediaNodeId uint64 `protobuf:"varint,2,opt,name=media_node_id,json=mediaNodeId,proto3" json:"media_node_id,omitempty"`
}

func (m *MsgCancelLease) Reset()         { *m = MsgCancelLease{} }
func (m *MsgCancelLease) String() string { return proto.CompactTextString(m) }
func (*MsgCancelLease) ProtoMessage()    {}
func (*MsgCancelLease) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{6}
}
func (m *MsgCancelLease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelLease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelLease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelLease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelLease.Merge(m, src)
}
func (m *MsgCancelLease) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelLease) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelLease.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelLease proto.InternalMessageInfo

func (m *MsgCancelLease) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCancelLease) GetMediaNodeId() uint64 {
	if m != nil {
		return m.MediaNodeId
	}
	return 0
}

// MsgCancelLeaseResponse defines the response for canceling a lease
type MsgCancelLeaseResponse struct {
	Success      bool       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	RefundAmount types.Coin `protobuf:"bytes,2,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount"`
}

func (m *MsgCancelLeaseResponse) Reset()         { *m = MsgCancelLeaseResponse{} }
func (m *MsgCancelLeaseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelLeaseResponse) ProtoMessage()    {}
func (*MsgCancelLeaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_256d46440b2f0bcd, []int{7}
}
func (m *MsgCancelLeaseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelLeaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelLeaseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelLeaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelLeaseResponse.Merge(m, src)
}
func (m *MsgCancelLeaseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelLeaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelLeaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelLeaseResponse proto.InternalMessageInfo

func (m *MsgCancelLeaseResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *MsgCancelLeaseResponse) GetRefundAmount() types.Coin {
	if m != nil {
		return m.RefundAmount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*MsgRegisterMediaNode)(nil), "OmniFlix.medianode.v1beta1.MsgRegisterMediaNode")
	proto.RegisterType((*MsgRegisterMediaNodeResponse)(nil), "OmniFlix.medianode.v1beta1.MsgRegisterMediaNodeResponse")
	proto.RegisterType((*MsgUpdateMediaNode)(nil), "OmniFlix.medianode.v1beta1.MsgUpdateMediaNode")
	proto.RegisterType((*MsgUpdateMediaNodeResponse)(nil), "OmniFlix.medianode.v1beta1.MsgUpdateMediaNodeResponse")
	proto.RegisterType((*MsgLeaseMediaNode)(nil), "OmniFlix.medianode.v1beta1.MsgLeaseMediaNode")
	proto.RegisterType((*MsgLeaseMediaNodeResponse)(nil), "OmniFlix.medianode.v1beta1.MsgLeaseMediaNodeResponse")
	proto.RegisterType((*MsgCancelLease)(nil), "OmniFlix.medianode.v1beta1.MsgCancelLease")
	proto.RegisterType((*MsgCancelLeaseResponse)(nil), "OmniFlix.medianode.v1beta1.MsgCancelLeaseResponse")
}

func init() {
	proto.RegisterFile("OmniFlix/medianode/v1beta1/tx.proto", fileDescriptor_256d46440b2f0bcd)
}

var fileDescriptor_256d46440b2f0bcd = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x3f, 0x6f, 0xd3, 0x40,
	0x1c, 0x8d, 0x93, 0x40, 0xe9, 0xaf, 0x24, 0x10, 0x2b, 0x42, 0xae, 0x29, 0xa6, 0x32, 0x4b, 0xa9,
	0x84, 0x4d, 0x03, 0x54, 0xac, 0xb4, 0x11, 0x02, 0x09, 0x87, 0xca, 0x08, 0x06, 0x16, 0xeb, 0x62,
	0x5f, 0x9d, 0x93, 0x62, 0x9f, 0xe5, 0xb3, 0x43, 0x3c, 0xf1, 0x15, 0xf8, 0x58, 0x1d, 0x3b, 0x32,
	0x21, 0x94, 0x2c, 0x0c, 0x7c, 0x02, 0x26, 0xe4, 0x73, 0xec, 0xa6, 0x49, 0xc9, 0x1f, 0x10, 0x9b,
	0xef, 0xee, 0xbd, 0xf7, 0xbb, 0xf7, 0xf2, 0x72, 0xf0, 0xe0, 0xad, 0xe7, 0x93, 0x97, 0x7d, 0x32,
	0xd4, 0x3d, 0xec, 0x10, 0xe4, 0x53, 0x07, 0xeb, 0x83, 0x83, 0x2e, 0x8e, 0xd0, 0x81, 0x1e, 0x0d,
	0xb5, 0x20, 0xa4, 0x11, 0x15, 0xe5, 0x1c, 0xa4, 0x15, 0x20, 0x6d, 0x02, 0x92, 0x9b, 0x2e, 0x75,
	0x29, 0x87, 0xe9, 0xe9, 0x57, 0xc6, 0x90, 0x15, 0x9b, 0x32, 0x8f, 0x32, 0xbd, 0x8b, 0xd8, 0x85,
	0x9e, 0x4d, 0x89, 0x3f, 0x39, 0xdf, 0x5f, 0x30, 0xf6, 0x62, 0x06, 0xc7, 0xaa, 0x3f, 0x05, 0x68,
	0x1a, 0xcc, 0x35, 0xb1, 0x4b, 0x58, 0x84, 0x43, 0x23, 0x3d, 0xee, 0x50, 0x07, 0x8b, 0x12, 0x6c,
	0xd8, 0x21, 0x46, 0x11, 0x0d, 0x25, 0x61, 0x57, 0xd8, 0xdb, 0x34, 0xf3, 0xa5, 0x78, 0x1b, 0x2a,
	0x71, 0xd8, 0x97, 0xca, 0x7c, 0x37, 0xfd, 0x14, 0x3f, 0x40, 0xbd, 0x87, 0x42, 0xe7, 0x13, 0x0a,
	0xb1, 0xc5, 0x02, 0x6c, 0x33, 0xa9, 0xb2, 0x2b, 0xec, 0x6d, 0xb5, 0x1e, 0x6a, 0x7f, 0xf6, 0xa6,
	0xbd, 0x9a, 0x30, 0xde, 0xa5, 0x84, 0xa3, 0xea, 0xd9, 0xb7, 0xfb, 0x25, 0xb3, 0xd6, 0x9b, 0xde,
	0x14, 0x4f, 0xa0, 0xd9, 0xc7, 0x88, 0x61, 0x0b, 0x79, 0x34, 0xf6, 0x23, 0x2b, 0xc0, 0xa1, 0xe5,
	0xa0, 0x44, 0xaa, 0x72, 0xf5, 0x6d, 0x2d, 0xcb, 0x41, 0x4b, 0x73, 0x28, 0x64, 0x8f, 0x29, 0xf1,
	0x27, 0x6a, 0x0d, 0x4e, 0x7e, 0xc1, 0xb9, 0x27, 0x38, 0x6c, 0xa3, 0x44, 0xd5, 0x60, 0xe7, 0x2a,
	0xb7, 0x26, 0x66, 0x01, 0xf5, 0x19, 0x16, 0xeb, 0x50, 0x26, 0x0e, 0x37, 0x5c, 0x35, 0xcb, 0xc4,
	0x51, 0x7f, 0x09, 0x20, 0x1a, 0xcc, 0x7d, 0x1f, 0x38, 0x28, 0xc2, 0xab, 0x84, 0x93, 0x09, 0x94,
	0x73, 0x81, 0x3c, 0xac, 0xca, 0xa2, 0xb0, 0xaa, 0xff, 0x35, 0xac, 0x6b, 0x7f, 0x1d, 0xd6, 0x0e,
	0xc8, 0xf3, 0xde, 0xf3, 0xa8, 0xd4, 0x00, 0x1a, 0x06, 0x73, 0xdf, 0xa4, 0xac, 0x55, 0x82, 0x51,
	0xa1, 0xc6, 0x6d, 0x59, 0xa9, 0x2f, 0xab, 0xc8, 0x68, 0xcb, 0xcb, 0xb9, 0xaf, 0x1d, 0xf1, 0x1e,
	0x40, 0x66, 0xc1, 0x41, 0x49, 0xd6, 0xa1, 0xaa, 0xb9, 0xc9, 0x77, 0xda, 0x28, 0x61, 0xea, 0x5d,
	0xd8, 0x9e, 0x9b, 0x58, 0x5c, 0xa7, 0x03, 0x75, 0x83, 0xb9, 0xc7, 0xc8, 0xb7, 0x71, 0x9f, 0x43,
	0xfe, 0xed, 0x2e, 0xea, 0x10, 0xee, 0x5c, 0xd6, 0x2b, 0x3a, 0x22, 0xc1, 0x06, 0x8b, 0x6d, 0x1b,
	0x33, 0xc6, 0x75, 0x6f, 0x98, 0xf9, 0x52, 0x6c, 0x43, 0x2d, 0xc4, 0xa7, 0xb1, 0xef, 0x4c, 0x7e,
	0x03, 0xae, 0xbb, 0x42, 0xf6, 0x37, 0x33, 0x56, 0x16, 0x7e, 0xeb, 0x47, 0x05, 0x2a, 0x06, 0x73,
	0xc5, 0xcf, 0xd0, 0x98, 0xff, 0x5b, 0x3e, 0x5e, 0xd4, 0x92, 0xab, 0xaa, 0x2d, 0x3f, 0x5f, 0x97,
	0x51, 0x18, 0x4d, 0xe0, 0xd6, 0x6c, 0xf1, 0xb5, 0x25, 0x62, 0x33, 0x78, 0xf9, 0x70, 0x3d, 0x7c,
	0x31, 0x7a, 0x00, 0xf5, 0x99, 0x66, 0x3d, 0x5a, 0xa2, 0x74, 0x19, 0x2e, 0x3f, 0x5b, 0x0b, 0x5e,
	0xcc, 0xf5, 0x60, 0x6b, 0xba, 0x42, 0xfb, 0x4b, 0x54, 0xa6, 0xb0, 0x72, 0x6b, 0x75, 0x6c, 0x3e,
	0xee, 0xa8, 0x73, 0x36, 0x52, 0x84, 0xf3, 0x91, 0x22, 0x7c, 0x1f, 0x29, 0xc2, 0x97, 0xb1, 0x52,
	0x3a, 0x1f, 0x2b, 0xa5, 0xaf, 0x63, 0xa5, 0xf4, 0xf1, 0xa9, 0x4b, 0xa2, 0x5e, 0xdc, 0xd5, 0x6c,
	0xea, 0xe9, 0xc5, 0x73, 0x4e, 0x3d, 0x9f, 0x9c, 0xf6, 0xc9, 0xb0, 0x17, 0x77, 0xf5, 0xc1, 0xa1,
	0x3e, 0xfd, 0xbe, 0x47, 0x49, 0x80, 0x59, 0xf7, 0x3a, 0x7f, 0xd4, 0x9f, 0xfc, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x85, 0x21, 0xb6, 0x15, 0x79, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterMediaNode registers a new media node
	RegisterMediaNode(ctx context.Context, in *MsgRegisterMediaNode, opts ...grpc.CallOption) (*MsgRegisterMediaNodeResponse, error)
	// UpdateMediaNode updates an existing media node
	UpdateMediaNode(ctx context.Context, in *MsgUpdateMediaNode, opts ...grpc.CallOption) (*MsgUpdateMediaNodeResponse, error)
	// LeaseMediaNode creates a new lease for a media node
	LeaseMediaNode(ctx context.Context, in *MsgLeaseMediaNode, opts ...grpc.CallOption) (*MsgLeaseMediaNodeResponse, error)
	// CancelLease cancels an active lease
	CancelLease(ctx context.Context, in *MsgCancelLease, opts ...grpc.CallOption) (*MsgCancelLeaseResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterMediaNode(ctx context.Context, in *MsgRegisterMediaNode, opts ...grpc.CallOption) (*MsgRegisterMediaNodeResponse, error) {
	out := new(MsgRegisterMediaNodeResponse)
	err := c.cc.Invoke(ctx, "/OmniFlix.medianode.v1beta1.Msg/RegisterMediaNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMediaNode(ctx context.Context, in *MsgUpdateMediaNode, opts ...grpc.CallOption) (*MsgUpdateMediaNodeResponse, error) {
	out := new(MsgUpdateMediaNodeResponse)
	err := c.cc.Invoke(ctx, "/OmniFlix.medianode.v1beta1.Msg/UpdateMediaNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LeaseMediaNode(ctx context.Context, in *MsgLeaseMediaNode, opts ...grpc.CallOption) (*MsgLeaseMediaNodeResponse, error) {
	out := new(MsgLeaseMediaNodeResponse)
	err := c.cc.Invoke(ctx, "/OmniFlix.medianode.v1beta1.Msg/LeaseMediaNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelLease(ctx context.Context, in *MsgCancelLease, opts ...grpc.CallOption) (*MsgCancelLeaseResponse, error) {
	out := new(MsgCancelLeaseResponse)
	err := c.cc.Invoke(ctx, "/OmniFlix.medianode.v1beta1.Msg/CancelLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterMediaNode registers a new media node
	RegisterMediaNode(context.Context, *MsgRegisterMediaNode) (*MsgRegisterMediaNodeResponse, error)
	// UpdateMediaNode updates an existing media node
	UpdateMediaNode(context.Context, *MsgUpdateMediaNode) (*MsgUpdateMediaNodeResponse, error)
	// LeaseMediaNode creates a new lease for a media node
	LeaseMediaNode(context.Context, *MsgLeaseMediaNode) (*MsgLeaseMediaNodeResponse, error)
	// CancelLease cancels an active lease
	CancelLease(context.Context, *MsgCancelLease) (*MsgCancelLeaseResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterMediaNode(ctx context.Context, req *MsgRegisterMediaNode) (*MsgRegisterMediaNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMediaNode not implemented")
}
func (*UnimplementedMsgServer) UpdateMediaNode(ctx context.Context, req *MsgUpdateMediaNode) (*MsgUpdateMediaNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMediaNode not implemented")
}
func (*UnimplementedMsgServer) LeaseMediaNode(ctx context.Context, req *MsgLeaseMediaNode) (*MsgLeaseMediaNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaseMediaNode not implemented")
}
func (*UnimplementedMsgServer) CancelLease(ctx context.Context, req *MsgCancelLease) (*MsgCancelLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLease not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterMediaNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterMediaNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterMediaNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OmniFlix.medianode.v1beta1.Msg/RegisterMediaNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterMediaNode(ctx, req.(*MsgRegisterMediaNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMediaNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMediaNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMediaNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OmniFlix.medianode.v1beta1.Msg/UpdateMediaNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMediaNode(ctx, req.(*MsgUpdateMediaNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LeaseMediaNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLeaseMediaNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LeaseMediaNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OmniFlix.medianode.v1beta1.Msg/LeaseMediaNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LeaseMediaNode(ctx, req.(*MsgLeaseMediaNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelLease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OmniFlix.medianode.v1beta1.Msg/CancelLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelLease(ctx, req.(*MsgCancelLease))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OmniFlix.medianode.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMediaNode",
			Handler:    _Msg_RegisterMediaNode_Handler,
		},
		{
			MethodName: "UpdateMediaNode",
			Handler:    _Msg_UpdateMediaNode_Handler,
		},
		{
			MethodName: "LeaseMediaNode",
			Handler:    _Msg_LeaseMediaNode_Handler,
		},
		{
			MethodName: "CancelLease",
			Handler:    _Msg_CancelLease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OmniFlix/medianode/v1beta1/tx.proto",
}

func (m *MsgRegisterMediaNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterMediaNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterMediaNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LeaseAmountPerDay.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.HardwareSpecs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterMediaNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterMediaNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterMediaNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMediaNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMediaNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMediaNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LeaseAmountPerDay.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.HardwareSpecs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMediaNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMediaNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMediaNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLeaseMediaNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaseMediaNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaseMediaNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeaseDays != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LeaseDays))
		i--
		dAtA[i] = 0x18
	}
	if m.MediaNodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MediaNodeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLeaseMediaNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaseMediaNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaseMediaNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelLease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelLease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelLease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MediaNodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MediaNodeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelLeaseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelLeaseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelLeaseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RefundAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterMediaNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.HardwareSpecs.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.LeaseAmountPerDay.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRegisterMediaNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgUpdateMediaNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.HardwareSpecs.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.LeaseAmountPerDay.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateMediaNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLeaseMediaNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MediaNodeId != 0 {
		n += 1 + sovTx(uint64(m.MediaNodeId))
	}
	if m.LeaseDays != 0 {
		n += 1 + sovTx(uint64(m.LeaseDays))
	}
	return n
}

func (m *MsgLeaseMediaNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelLease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MediaNodeId != 0 {
		n += 1 + sovTx(uint64(m.MediaNodeId))
	}
	return n
}

func (m *MsgCancelLeaseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = m.RefundAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterMediaNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterMediaNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterMediaNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HardwareSpecs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseAmountPerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeaseAmountPerDay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterMediaNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterMediaNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterMediaNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMediaNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMediaNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMediaNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HardwareSpecs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseAmountPerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeaseAmountPerDay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMediaNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMediaNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMediaNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaseMediaNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaseMediaNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaseMediaNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaNodeId", wireType)
			}
			m.MediaNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaNodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseDays", wireType)
			}
			m.LeaseDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseDays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaseMediaNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaseMediaNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaseMediaNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelLease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelLease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelLease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaNodeId", wireType)
			}
			m.MediaNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaNodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelLeaseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelLeaseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelLeaseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RefundAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
